Example	channels_builtin.html#example	 Example	
Be sure to compile with --threads:on.	channels_builtin.html#be-sure-to-compile-with-minusminusthreadscolonondot	 Be sure to compile with --threads:on.	
The channels and threads modules are part of system and should not be	channels_builtin.html#the-channels-and-threads-modules-are-part-of-system-and-should-not-be	 The channels and threads modules are part of system and should not be	
imported.	channels_builtin.html#importeddot	 imported.	
Channels can either be:	channels_builtin.html#channels-can-either-becolon	 Channels can either be:	
- declared at the module level, or	channels_builtin.html#minus-declared-at-the-module-level-or	 - declared at the module level, or	
- passed to procedures by ptr (raw pointer) -- see note on safety.	channels_builtin.html#minus-passed-to-procedures-by-ptr-raw-pointer-minusminus-see-note-on-safetydot	 - passed to procedures by ptr (raw pointer) -- see note on safety.	
This proc will be run in another thread using the threads module.	channels_builtin.html#this-proc-will-be-run-in-another-thread-using-the-threads-moduledot	 This proc will be run in another thread using the threads module.	
This is another proc to run in a background thread. This proc takes a while	channels_builtin.html#this-is-another-proc-to-run-in-a-background-threaddot-this-proc-takes-a-while	 This is another proc to run in a background thread. This proc takes a while	
to send the message since it sleeps for 2 seconds (or 2000 milliseconds).	channels_builtin.html#to-send-the-message-since-it-sleeps-for-2-seconds-or-2000-milliseconds-dot	 to send the message since it sleeps for 2 seconds (or 2000 milliseconds).	
Initialize the channel.	channels_builtin.html#initialize-the-channeldot	 Initialize the channel.	
Launch the worker.	channels_builtin.html#launch-the-workerdot	 Launch the worker.	
Block until the message arrives, then print it out.	channels_builtin.html#block-until-the-message-arrives-then-print-it-outdot	 Block until the message arrives, then print it out.	
Wait for the thread to exit before moving on to the next example.	channels_builtin.html#wait-for-the-thread-to-exit-before-moving-on-to-the-next-exampledot	 Wait for the thread to exit before moving on to the next example.	
Launch the other worker.	channels_builtin.html#launch-the-other-workerdot	 Launch the other worker.	
Wait for the second thread to exit before cleaning up the channel.	channels_builtin.html#wait-for-the-second-thread-to-exit-before-cleaning-up-the-channeldot	 Wait for the second thread to exit before cleaning up the channel.	
Clean up the channel.	channels_builtin.html#clean-up-the-channeldot	 Clean up the channel.	
Sample output	channels_builtin.html#clean-up-the-channeldot-sample-output	  Sample output	
Passing Channels Safely	channels_builtin.html#clean-up-the-channeldot-passing-channels-safely	  Passing Channels Safely	
Use allocShared0 to allocate some shared-heap memory and zero it.	channels_builtin.html#use-allocshared0-to-allocate-some-sharedminusheap-memory-and-zero-itdot	 Use allocShared0 to allocate some shared-heap memory and zero it.	
The usual warnings about dealing with raw pointers apply. Exercise caution.	channels_builtin.html#the-usual-warnings-about-dealing-with-raw-pointers-applydot-exercise-cautiondot	 The usual warnings about dealing with raw pointers apply. Exercise caution.	
Channel	channels_builtin.html#Channel	channels_builtin: Channel	
send	channels_builtin.html#send,Channel[TMsg],sinkTMsg	channels_builtin: send*[TMsg](c: var Channel[TMsg]; msg: sink TMsg)	
trySend	channels_builtin.html#trySend,Channel[TMsg],sinkTMsg	channels_builtin: trySend*[TMsg](c: var Channel[TMsg]; msg: sink TMsg): bool	
recv	channels_builtin.html#recv,Channel[TMsg]	channels_builtin: recv*[TMsg](c: var Channel[TMsg]): TMsg	
tryRecv	channels_builtin.html#tryRecv,Channel[TMsg]	channels_builtin: tryRecv*[TMsg](c: var Channel[TMsg]): tuple[dataAvailable: bool, msg: TMsg]	
peek	channels_builtin.html#peek,Channel[TMsg]	channels_builtin: peek*[TMsg](c: var Channel[TMsg]): int	
open	channels_builtin.html#open,Channel[TMsg],int	channels_builtin: open*[TMsg](c: var Channel[TMsg]; maxItems: int = 0)	
close	channels_builtin.html#close,Channel[TMsg]	channels_builtin: close*[TMsg](c: var Channel[TMsg])	
ready	channels_builtin.html#ready,Channel[TMsg]	channels_builtin: ready*[TMsg](c: var Channel[TMsg]): bool	
