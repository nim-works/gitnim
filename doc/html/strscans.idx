scanf	strscans.html#scanf.m,string,static[string],varargs[typed]	strscans: scanf(input: string; pattern: static[string]; results: varargs[typed]): bool	
scanTuple	strscans.html#scanTuple.m,untyped,static[string],varargs[untyped]	strscans: scanTuple(input: untyped; pattern: static[string];\n          matcherTypes: varargs[untyped]): untyped	
atom	strscans.html#atom.t,string,int,char	strscans: atom(input: string; idx: int; c: char): bool	
atom	strscans.html#atom.t,string,int,set[char]	strscans: atom(input: string; idx: int; s: set[char]): bool	
hasNxt	strscans.html#hasNxt.t,string,int	strscans: hasNxt(input: string; idx: int): bool	
success	strscans.html#success.t,int	strscans: success(x: int): bool	
nxt	strscans.html#nxt.t,string,int,int	strscans: nxt(input: string; idx, step: int = 1)	
scanp	strscans.html#scanp.m,typed,typed,varargs[untyped]	strscans: scanp(input, idx: typed; pattern: varargs[untyped]): bool	
scanf	strscans.html#scanf_1	Module strscans	
Startswith vs full match	strscans.html#startswith-vs-full-match	 Startswith vs full match	
User definable matchers	strscans.html#user-definable-matchers	 User definable matchers	
The scanp macro	strscans.html#the-scanp-macro	 The scanp macro	
