Retrieving a website	httpclient.html#retrieving-a-website	 Retrieving a website	
Using HTTP POST	httpclient.html#using-http-post	 Using HTTP POST	
Progress reporting	httpclient.html#progress-reporting	 Progress reporting	
SSL/TLS support	httpclient.html#sslslashtls-support	 SSL/TLS support	
Timeouts	httpclient.html#timeouts	 Timeouts	
Proxy	httpclient.html#proxy	 Proxy	
Redirects	httpclient.html#redirects	 Redirects	
Response	httpclient.html#Response	httpclient: Response	
AsyncResponse	httpclient.html#AsyncResponse	httpclient: AsyncResponse	
code	httpclient.html#code	httpclient: code(response: Response | AsyncResponse): HttpCode	
contentType	httpclient.html#contentType	httpclient: contentType(response: Response | AsyncResponse): string	
contentLength	httpclient.html#contentLength	httpclient: contentLength(response: Response | AsyncResponse): int	
lastModified	httpclient.html#lastModified	httpclient: lastModified(response: Response | AsyncResponse): DateTime	
body	httpclient.html#body,Response	httpclient: body(response: Response): string	
body	httpclient.html#body,AsyncResponse	httpclient: body(response: AsyncResponse): Future[string]	
Proxy	httpclient.html#Proxy	httpclient: Proxy	
MultipartEntries	httpclient.html#MultipartEntries	httpclient: MultipartEntries	
MultipartData	httpclient.html#MultipartData	httpclient: MultipartData	
ProtocolError	httpclient.html#ProtocolError	httpclient: ProtocolError	
HttpRequestError	httpclient.html#HttpRequestError	httpclient: HttpRequestError	
defUserAgent	httpclient.html#defUserAgent	httpclient: defUserAgent	
newProxy	httpclient.html#newProxy,string,string	httpclient: newProxy(url: string; auth = &quot;&quot;): Proxy	
newProxy	httpclient.html#newProxy,Uri,string	httpclient: newProxy(url: Uri; auth = &quot;&quot;): Proxy	
newMultipartData	httpclient.html#newMultipartData	httpclient: newMultipartData(): MultipartData	
`$`	httpclient.html#$,MultipartData	httpclient: `$`(data: MultipartData): string	
add	httpclient.html#add,MultipartData,string,string,string,string	httpclient: add(p: MultipartData; name, content: string; filename: string = &quot;&quot;;\n    contentType: string = &quot;&quot;; useStream = true)	
add	httpclient.html#add,MultipartData,MultipartEntries	httpclient: add(p: MultipartData; xs: MultipartEntries): MultipartData	
newMultipartData	httpclient.html#newMultipartData,MultipartEntries	httpclient: newMultipartData(xs: MultipartEntries): MultipartData	
addFiles	httpclient.html#addFiles,MultipartData,openArray[tuple[string,string]]	httpclient: addFiles(p: MultipartData; xs: openArray[tuple[name, file: string]];\n         mimeDb = newMimetypes(); useStream = true): MultipartData	
`[]=`	httpclient.html#[]=,MultipartData,string,string	httpclient: `[]=`(p: MultipartData; name, content: string)	
`[]=`	httpclient.html#[]=,MultipartData,string,tuple[string,string,string]	httpclient: `[]=`(p: MultipartData; name: string;\n      file: tuple[name, contentType, content: string])	
ProgressChangedProc	httpclient.html#ProgressChangedProc	httpclient: ProgressChangedProc	
HttpClientBase	httpclient.html#HttpClientBase	httpclient: HttpClientBase	
HttpClient	httpclient.html#HttpClient	httpclient: HttpClient	
newHttpClient	httpclient.html#newHttpClient,int,Proxy,int	httpclient: newHttpClient(userAgent = defUserAgent; maxRedirects = 5;\n              sslContext = getDefaultSSL(); proxy: Proxy = nil; timeout = -1;\n              headers = newHttpHeaders()): HttpClient	
AsyncHttpClient	httpclient.html#AsyncHttpClient	httpclient: AsyncHttpClient	
newAsyncHttpClient	httpclient.html#newAsyncHttpClient,int,Proxy	httpclient: newAsyncHttpClient(userAgent = defUserAgent; maxRedirects = 5;\n                   sslContext = getDefaultSSL(); proxy: Proxy = nil;\n                   headers = newHttpHeaders()): AsyncHttpClient	
close	httpclient.html#close	httpclient: close(client: HttpClient | AsyncHttpClient)	
getSocket	httpclient.html#getSocket,HttpClient	httpclient: getSocket(client: HttpClient): Socket	
getSocket	httpclient.html#getSocket,AsyncHttpClient	httpclient: getSocket(client: AsyncHttpClient): AsyncSocket	
request	httpclient.html#request,AsyncHttpClient,,string,HttpHeaders,MultipartData	httpclient: request(client: AsyncHttpClient; url: Uri | string;\n        httpMethod: HttpMethod | string = HttpGet; body = &quot;&quot;;\n        headers: HttpHeaders = nil; multipart: MultipartData = nil): Future[\n    AsyncResponse]	
request	httpclient.html#request,HttpClient,,string,HttpHeaders,MultipartData	httpclient: request(client: HttpClient; url: Uri | string;\n        httpMethod: HttpMethod | string = HttpGet; body = &quot;&quot;;\n        headers: HttpHeaders = nil; multipart: MultipartData = nil): Response	
head	httpclient.html#head,AsyncHttpClient,	httpclient: head(client: AsyncHttpClient; url: Uri | string): Future[AsyncResponse]	
head	httpclient.html#head,HttpClient,	httpclient: head(client: HttpClient; url: Uri | string): Response	
get	httpclient.html#get,AsyncHttpClient,	httpclient: get(client: AsyncHttpClient; url: Uri | string): Future[AsyncResponse]	
get	httpclient.html#get,HttpClient,	httpclient: get(client: HttpClient; url: Uri | string): Response	
getContent	httpclient.html#getContent,AsyncHttpClient,	httpclient: getContent(client: AsyncHttpClient; url: Uri | string): Future[string]	
getContent	httpclient.html#getContent,HttpClient,	httpclient: getContent(client: HttpClient; url: Uri | string): string	
delete	httpclient.html#delete,AsyncHttpClient,	httpclient: delete(client: AsyncHttpClient; url: Uri | string): Future[AsyncResponse]	
delete	httpclient.html#delete,HttpClient,	httpclient: delete(client: HttpClient; url: Uri | string): Response	
deleteContent	httpclient.html#deleteContent,AsyncHttpClient,	httpclient: deleteContent(client: AsyncHttpClient; url: Uri | string): Future[string]	
deleteContent	httpclient.html#deleteContent,HttpClient,	httpclient: deleteContent(client: HttpClient; url: Uri | string): string	
post	httpclient.html#post,AsyncHttpClient,,string,MultipartData	httpclient: post(client: AsyncHttpClient; url: Uri | string; body = &quot;&quot;;\n     multipart: MultipartData = nil): Future[AsyncResponse]	
post	httpclient.html#post,HttpClient,,string,MultipartData	httpclient: post(client: HttpClient; url: Uri | string; body = &quot;&quot;;\n     multipart: MultipartData = nil): Response	
postContent	httpclient.html#postContent,AsyncHttpClient,,string,MultipartData	httpclient: postContent(client: AsyncHttpClient; url: Uri | string; body = &quot;&quot;;\n            multipart: MultipartData = nil): Future[string]	
postContent	httpclient.html#postContent,HttpClient,,string,MultipartData	httpclient: postContent(client: HttpClient; url: Uri | string; body = &quot;&quot;;\n            multipart: MultipartData = nil): string	
put	httpclient.html#put,AsyncHttpClient,,string,MultipartData	httpclient: put(client: AsyncHttpClient; url: Uri | string; body = &quot;&quot;;\n    multipart: MultipartData = nil): Future[AsyncResponse]	
put	httpclient.html#put,HttpClient,,string,MultipartData	httpclient: put(client: HttpClient; url: Uri | string; body = &quot;&quot;;\n    multipart: MultipartData = nil): Response	
putContent	httpclient.html#putContent,AsyncHttpClient,,string,MultipartData	httpclient: putContent(client: AsyncHttpClient; url: Uri | string; body = &quot;&quot;;\n           multipart: MultipartData = nil): Future[string]	
putContent	httpclient.html#putContent,HttpClient,,string,MultipartData	httpclient: putContent(client: HttpClient; url: Uri | string; body = &quot;&quot;;\n           multipart: MultipartData = nil): string	
patch	httpclient.html#patch,AsyncHttpClient,,string,MultipartData	httpclient: patch(client: AsyncHttpClient; url: Uri | string; body = &quot;&quot;;\n      multipart: MultipartData = nil): Future[AsyncResponse]	
patch	httpclient.html#patch,HttpClient,,string,MultipartData	httpclient: patch(client: HttpClient; url: Uri | string; body = &quot;&quot;;\n      multipart: MultipartData = nil): Response	
patchContent	httpclient.html#patchContent,AsyncHttpClient,,string,MultipartData	httpclient: patchContent(client: AsyncHttpClient; url: Uri | string; body = &quot;&quot;;\n             multipart: MultipartData = nil): Future[string]	
patchContent	httpclient.html#patchContent,HttpClient,,string,MultipartData	httpclient: patchContent(client: HttpClient; url: Uri | string; body = &quot;&quot;;\n             multipart: MultipartData = nil): string	
downloadFile	httpclient.html#downloadFile,HttpClient,,string	httpclient: downloadFile(client: HttpClient; url: Uri | string; filename: string)	
downloadFile	httpclient.html#downloadFile,AsyncHttpClient,,string	httpclient: downloadFile(client: AsyncHttpClient; url: Uri | string; filename: string): Future[\n    void]	
