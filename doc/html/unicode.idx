Rune	unicode.html#Rune	unicode: Rune	
runeLen	unicode.html#runeLen,openArray[char]	unicode: runeLen(s: openArray[char]): int	
runeLenAt	unicode.html#runeLenAt,openArray[char],Natural	unicode: runeLenAt(s: openArray[char]; i: Natural): int	
fastRuneAt	unicode.html#fastRuneAt.t,,int,untyped	unicode: fastRuneAt(s: openArray[char] or string; i: int; result: untyped; doInc = true)	
runeAt	unicode.html#runeAt,openArray[char],Natural	unicode: runeAt(s: openArray[char]; i: Natural): Rune	
validateUtf8	unicode.html#validateUtf8,openArray[char]	unicode: validateUtf8(s: openArray[char]): int	
fastToUTF8Copy	unicode.html#fastToUTF8Copy.t,Rune,string,int	unicode: fastToUTF8Copy(c: Rune; s: var string; pos: int; doInc = true)	
toUTF8	unicode.html#toUTF8,Rune	unicode: toUTF8(c: Rune): string	
add	unicode.html#add,string,Rune	unicode: add(s: var string; c: Rune)	
`$`	unicode.html#$,Rune	unicode: `$`(rune: Rune): string	
`$`	unicode.html#$,seq[Rune]	unicode: `$`(runes: seq[Rune]): string	
runeOffset	unicode.html#runeOffset,openArray[char],Natural,Natural	unicode: runeOffset(s: openArray[char]; pos: Natural; start: Natural = 0): int	
runeReverseOffset	unicode.html#runeReverseOffset,openArray[char],Positive	unicode: runeReverseOffset(s: openArray[char]; rev: Positive): (int, int)	
runeAtPos	unicode.html#runeAtPos,openArray[char],int	unicode: runeAtPos(s: openArray[char]; pos: int): Rune	
runeStrAtPos	unicode.html#runeStrAtPos,openArray[char],Natural	unicode: runeStrAtPos(s: openArray[char]; pos: Natural): string	
runeSubStr	unicode.html#runeSubStr,openArray[char],int,int	unicode: runeSubStr(s: openArray[char]; pos: int; len: int = int.high): string	
`&lt;=%`	unicode.html#<=%,Rune,Rune	unicode: `&lt;=%`(a, b: Rune): bool	
`&lt;%`	unicode.html#<%,Rune,Rune	unicode: `&lt;%`(a, b: Rune): bool	
`==`	unicode.html#==,Rune,Rune	unicode: `==`(a, b: Rune): bool	
toLower	unicode.html#toLower,Rune	unicode: toLower(c: Rune): Rune	
toUpper	unicode.html#toUpper,Rune	unicode: toUpper(c: Rune): Rune	
toTitle	unicode.html#toTitle,Rune	unicode: toTitle(c: Rune): Rune	
isLower	unicode.html#isLower,Rune	unicode: isLower(c: Rune): bool	
isUpper	unicode.html#isUpper,Rune	unicode: isUpper(c: Rune): bool	
isAlpha	unicode.html#isAlpha,Rune	unicode: isAlpha(c: Rune): bool	
isTitle	unicode.html#isTitle,Rune	unicode: isTitle(c: Rune): bool	
isWhiteSpace	unicode.html#isWhiteSpace,Rune	unicode: isWhiteSpace(c: Rune): bool	
isCombining	unicode.html#isCombining,Rune	unicode: isCombining(c: Rune): bool	
isAlpha	unicode.html#isAlpha,openArray[char]	unicode: isAlpha(s: openArray[char]): bool	
isSpace	unicode.html#isSpace,openArray[char]	unicode: isSpace(s: openArray[char]): bool	
toUpper	unicode.html#toUpper,openArray[char]	unicode: toUpper(s: openArray[char]): string	
toLower	unicode.html#toLower,openArray[char]	unicode: toLower(s: openArray[char]): string	
swapCase	unicode.html#swapCase,openArray[char]	unicode: swapCase(s: openArray[char]): string	
capitalize	unicode.html#capitalize,openArray[char]	unicode: capitalize(s: openArray[char]): string	
translate	unicode.html#translate,openArray[char],proc(string)	unicode: translate(s: openArray[char]; replacements: proc (key: string): string): string	
title	unicode.html#title,openArray[char]	unicode: title(s: openArray[char]): string	
runes	unicode.html#runes.i,openArray[char]	unicode: runes(s: openArray[char]): Rune	
utf8	unicode.html#utf8.i,openArray[char]	unicode: utf8(s: openArray[char]): string	
toRunes	unicode.html#toRunes,openArray[char]	unicode: toRunes(s: openArray[char]): seq[Rune]	
cmpRunesIgnoreCase	unicode.html#cmpRunesIgnoreCase,openArray[char],openArray[char]	unicode: cmpRunesIgnoreCase(a, b: openArray[char]): int	
reversed	unicode.html#reversed,openArray[char]	unicode: reversed(s: openArray[char]): string	
graphemeLen	unicode.html#graphemeLen,openArray[char],Natural	unicode: graphemeLen(s: openArray[char]; i: Natural): Natural	
lastRune	unicode.html#lastRune,openArray[char],int	unicode: lastRune(s: openArray[char]; last: int): (Rune, int)	
size	unicode.html#size,Rune	unicode: size(r: Rune): int	
split	unicode.html#split.i,openArray[char],openArray[Rune],int	unicode: split(s: openArray[char]; seps: openArray[Rune] = unicodeSpaces;\n      maxsplit: int = -1): string	
splitWhitespace	unicode.html#splitWhitespace.i,openArray[char]	unicode: splitWhitespace(s: openArray[char]): string	
splitWhitespace	unicode.html#splitWhitespace,openArray[char]	unicode: splitWhitespace(s: openArray[char]): seq[string]	
split	unicode.html#split.i,openArray[char],Rune,int	unicode: split(s: openArray[char]; sep: Rune; maxsplit: int = -1): string	
split	unicode.html#split,openArray[char],openArray[Rune],int	unicode: split(s: openArray[char]; seps: openArray[Rune] = unicodeSpaces;\n      maxsplit: int = -1): seq[string]	
split	unicode.html#split,openArray[char],Rune,int	unicode: split(s: openArray[char]; sep: Rune; maxsplit: int = -1): seq[string]	
strip	unicode.html#strip,openArray[char],openArray[Rune]	unicode: strip(s: openArray[char]; leading = true; trailing = true;\n      runes: openArray[Rune] = unicodeSpaces): string	
repeat	unicode.html#repeat,Rune,Natural	unicode: repeat(c: Rune; count: Natural): string	
align	unicode.html#align,openArray[char],Natural	unicode: align(s: openArray[char]; count: Natural; padding = &apos; &apos;.Rune): string	
alignLeft	unicode.html#alignLeft,openArray[char],Natural	unicode: alignLeft(s: openArray[char]; count: Natural; padding = &apos; &apos;.Rune): string	
runeLen	unicode.html#runeLen,string	unicode: runeLen(s: string): int	
runeLenAt	unicode.html#runeLenAt,string,Natural	unicode: runeLenAt(s: string; i: Natural): int	
runeAt	unicode.html#runeAt,string,Natural	unicode: runeAt(s: string; i: Natural): Rune	
validateUtf8	unicode.html#validateUtf8,string	unicode: validateUtf8(s: string): int	
runeOffset	unicode.html#runeOffset,string,Natural,Natural	unicode: runeOffset(s: string; pos: Natural; start: Natural = 0): int	
runeReverseOffset	unicode.html#runeReverseOffset,string,Positive	unicode: runeReverseOffset(s: string; rev: Positive): (int, int)	
runeAtPos	unicode.html#runeAtPos,string,int	unicode: runeAtPos(s: string; pos: int): Rune	
runeStrAtPos	unicode.html#runeStrAtPos,string,Natural	unicode: runeStrAtPos(s: string; pos: Natural): string	
runeSubStr	unicode.html#runeSubStr,string,int,int	unicode: runeSubStr(s: string; pos: int; len: int = int.high): string	
isAlpha	unicode.html#isAlpha,string	unicode: isAlpha(s: string): bool	
isSpace	unicode.html#isSpace,string	unicode: isSpace(s: string): bool	
toUpper	unicode.html#toUpper,string	unicode: toUpper(s: string): string	
toLower	unicode.html#toLower,string	unicode: toLower(s: string): string	
swapCase	unicode.html#swapCase,string	unicode: swapCase(s: string): string	
capitalize	unicode.html#capitalize,string	unicode: capitalize(s: string): string	
translate	unicode.html#translate,string,proc(string)	unicode: translate(s: string; replacements: proc (key: string): string): string	
title	unicode.html#title,string	unicode: title(s: string): string	
runes	unicode.html#runes.i,string	unicode: runes(s: string): Rune	
utf8	unicode.html#utf8.i,string	unicode: utf8(s: string): string	
toRunes	unicode.html#toRunes,string	unicode: toRunes(s: string): seq[Rune]	
cmpRunesIgnoreCase	unicode.html#cmpRunesIgnoreCase,string,string	unicode: cmpRunesIgnoreCase(a, b: string): int	
reversed	unicode.html#reversed,string	unicode: reversed(s: string): string	
graphemeLen	unicode.html#graphemeLen,string,Natural	unicode: graphemeLen(s: string; i: Natural): Natural	
lastRune	unicode.html#lastRune,string,int	unicode: lastRune(s: string; last: int): (Rune, int)	
split	unicode.html#split.i,string,openArray[Rune],int	unicode: split(s: string; seps: openArray[Rune] = unicodeSpaces; maxsplit: int = -1): string	
splitWhitespace	unicode.html#splitWhitespace.i,string	unicode: splitWhitespace(s: string): string	
splitWhitespace	unicode.html#splitWhitespace,string	unicode: splitWhitespace(s: string): seq[string]	
split	unicode.html#split.i,string,Rune,int	unicode: split(s: string; sep: Rune; maxsplit: int = -1): string	
split	unicode.html#split,string,openArray[Rune],int	unicode: split(s: string; seps: openArray[Rune] = unicodeSpaces; maxsplit: int = -1): seq[\n    string]	
split	unicode.html#split,string,Rune,int	unicode: split(s: string; sep: Rune; maxsplit: int = -1): seq[string]	
strip	unicode.html#strip,string,openArray[Rune]	unicode: strip(s: string; leading = true; trailing = true;\n      runes: openArray[Rune] = unicodeSpaces): string	
align	unicode.html#align,string,Natural	unicode: align(s: string; count: Natural; padding = &apos; &apos;.Rune): string	
alignLeft	unicode.html#alignLeft,string,Natural	unicode: alignLeft(s: string; count: Natural; padding = &apos; &apos;.Rune): string	
