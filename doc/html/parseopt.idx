Supported Syntax	parseopt.html#supported-syntax	 Supported Syntax	
Parsing	parseopt.html#parsing	 Parsing	
shortNoVal and longNoVal	parseopt.html#nimshortnoval-and-nimlongnoval	 <tt class="docutils literal"><span class="pre"><span class="Identifier">shortNoVal</span></span></tt> and <tt class="docutils literal"><span class="pre"><span class="Identifier">longNoVal</span></span></tt>	
See also	parseopt.html#see-also	 See also	
cmdEnd	parseopt.html#cmdEnd	CmdLineKind.cmdEnd	
cmdArgument	parseopt.html#cmdArgument	CmdLineKind.cmdArgument	
cmdLongOption	parseopt.html#cmdLongOption	CmdLineKind.cmdLongOption	
cmdShortOption	parseopt.html#cmdShortOption	CmdLineKind.cmdShortOption	
CmdLineKind	parseopt.html#CmdLineKind	parseopt: CmdLineKind	
OptParser	parseopt.html#OptParser	parseopt: OptParser	
initOptParser	parseopt.html#initOptParser,string,set[char],seq[string]	parseopt: initOptParser(cmdline = &quot;&quot;; shortNoVal: set[char] = {};\n              longNoVal: seq[string] = @[]; allowWhitespaceAfterColon = true): OptParser	
initOptParser	parseopt.html#initOptParser,seq[string],set[char],seq[string]	parseopt: initOptParser(cmdline: seq[string]; shortNoVal: set[char] = {};\n              longNoVal: seq[string] = @[]; allowWhitespaceAfterColon = true): OptParser	
next	parseopt.html#next,OptParser	parseopt: next(p: var OptParser)	
cmdLineRest	parseopt.html#cmdLineRest,OptParser	parseopt: cmdLineRest(p: OptParser): string	
remainingArgs	parseopt.html#remainingArgs,OptParser	parseopt: remainingArgs(p: OptParser): seq[string]	
getopt	parseopt.html#getopt.i,OptParser	parseopt: getopt(p: var OptParser): tuple[kind: CmdLineKind, key, val: string]	
getopt	parseopt.html#getopt.i,seq[string],set[char],seq[string]	parseopt: getopt(cmdline: seq[string] = @[]; shortNoVal: set[char] = {};\n       longNoVal: seq[string] = @[]): tuple[kind: CmdLineKind, key, val: string]	
