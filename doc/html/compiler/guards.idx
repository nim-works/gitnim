interestingCaseExpr	guards.html#interestingCaseExpr,PNode	guards: interestingCaseExpr(m: PNode): bool	
buildCall	guards.html#buildCall,PSym,PNode	guards: buildCall(op: PSym; a: PNode): PNode	
buildCall	guards.html#buildCall,PSym,PNode,PNode	guards: buildCall(op: PSym; a, b: PNode): PNode	
lowBound	guards.html#lowBound,ConfigRef,PNode	guards: lowBound(conf: ConfigRef; x: PNode): PNode	
highBound	guards.html#highBound,ConfigRef,PNode,Operators	guards: highBound(conf: ConfigRef; x: PNode; o: Operators): PNode	
buildLe	guards.html#buildLe,Operators,PNode,PNode	guards: buildLe(o: Operators; a, b: PNode): PNode	
canon	guards.html#canon,PNode,Operators	guards: canon(n: PNode; o: Operators): PNode	
buildAdd	guards.html#buildAdd,PNode,BiggestInt,Operators	guards: buildAdd(a: PNode; b: BiggestInt; o: Operators): PNode	
TModel	guards.html#TModel	guards: TModel	
addFact	guards.html#addFact,TModel,PNode	guards: addFact(m: var TModel; nn: PNode)	
addFactNeg	guards.html#addFactNeg,TModel,PNode	guards: addFactNeg(m: var TModel; n: PNode)	
sameTree	guards.html#sameTree,PNode,PNode	guards: sameTree(a, b: PNode): bool	
invalidateFacts	guards.html#invalidateFacts,seq[PNode],PNode	guards: invalidateFacts(s: var seq[PNode]; n: PNode)	
invalidateFacts	guards.html#invalidateFacts,TModel,PNode	guards: invalidateFacts(m: var TModel; n: PNode)	
doesImply	guards.html#doesImply,TModel,PNode	guards: doesImply(facts: TModel; prop: PNode): TImplication	
impliesNotNil	guards.html#impliesNotNil,TModel,PNode	guards: impliesNotNil(m: TModel; arg: PNode): TImplication	
simpleSlice	guards.html#simpleSlice,PNode,PNode	guards: simpleSlice(a, b: PNode): BiggestInt	
proveLe	guards.html#proveLe,TModel,PNode,PNode	guards: proveLe(m: TModel; a, b: PNode): TImplication	
addFactLe	guards.html#addFactLe,TModel,PNode,PNode	guards: addFactLe(m: var TModel; a, b: PNode)	
addFactLt	guards.html#addFactLt,TModel,PNode,PNode	guards: addFactLt(m: var TModel; a, b: PNode)	
addDiscriminantFact	guards.html#addDiscriminantFact,TModel,PNode	guards: addDiscriminantFact(m: var TModel; n: PNode)	
addAsgnFact	guards.html#addAsgnFact,TModel,PNode,PNode	guards: addAsgnFact(m: var TModel; key, value: PNode)	
sameSubexprs	guards.html#sameSubexprs,TModel,PNode,PNode	guards: sameSubexprs(m: TModel; a, b: PNode): bool	
addCaseBranchFacts	guards.html#addCaseBranchFacts,TModel,PNode,int	guards: addCaseBranchFacts(m: var TModel; n: PNode; i: int)	
checkFieldAccess	guards.html#checkFieldAccess,TModel,PNode,ConfigRef,bool	guards: checkFieldAccess(m: TModel; n: PNode; conf: ConfigRef; produceError: bool)	
