nimTitle	packed_ast	ic/packed_ast.html	module compiler/ic/packed_ast		0
nim	SymId	ic/packed_ast.html#SymId	type SymId		23
nim	ModuleId	ic/packed_ast.html#ModuleId	type ModuleId		24
nim	NodePos	ic/packed_ast.html#NodePos	type NodePos		25
nim	NodeId	ic/packed_ast.html#NodeId	type NodeId		27
nim	PackedItemId	ic/packed_ast.html#PackedItemId	object PackedItemId		29
nim	nilItemId	ic/packed_ast.html#nilItemId	const nilItemId		34
nim	emptyNodeId	ic/packed_ast.html#emptyNodeId	const emptyNodeId		37
nim	PackedLineInfo	ic/packed_ast.html#PackedLineInfo	object PackedLineInfo		40
nim	PackedLib	ic/packed_ast.html#PackedLib	object PackedLib		45
nim	PackedSym	ic/packed_ast.html#PackedSym	object PackedSym		52
nim	PackedType	ic/packed_ast.html#PackedType	object PackedType		74
nim	PackedNode	ic/packed_ast.html#PackedNode	object PackedNode		91
nim	PackedTree	ic/packed_ast.html#PackedTree	object PackedTree		101
nim	PackedInstantiation	ic/packed_ast.html#PackedInstantiation	object PackedInstantiation		104
nim	`==`	ic/packed_ast.html#==,SymId,SymId	proc `==`(a, b: SymId): bool		108
nim	hash	ic/packed_ast.html#hash,SymId	proc hash(a: SymId): Hash		109
nim	`==`	ic/packed_ast.html#==,NodePos,NodePos	proc `==`(a, b: NodePos): bool		111
nim	`==`	ic/packed_ast.html#==,NodeId,NodeId	proc `==`(a, b: NodeId): bool		113
nim	newTreeFrom	ic/packed_ast.html#newTreeFrom,PackedTree	proc newTreeFrom(old: PackedTree): PackedTree		115
nim	throwAwayLastNode	ic/packed_ast.html#throwAwayLastNode,PackedTree	proc throwAwayLastNode(tree: var PackedTree)		135
nim	addIdent	ic/packed_ast.html#addIdent,PackedTree,LitId,PackedLineInfo	proc addIdent(tree: var PackedTree; s: LitId; info: PackedLineInfo)		138
nim	addSym	ic/packed_ast.html#addSym,PackedTree,int32,PackedLineInfo	proc addSym(tree: var PackedTree; s: int32; info: PackedLineInfo)		141
nim	addModuleId	ic/packed_ast.html#addModuleId,PackedTree,ModuleId,PackedLineInfo	proc addModuleId(tree: var PackedTree; s: ModuleId; info: PackedLineInfo)		144
nim	addSymDef	ic/packed_ast.html#addSymDef,PackedTree,SymId,PackedLineInfo	proc addSymDef(tree: var PackedTree; s: SymId; info: PackedLineInfo)		147
nim	isAtom	ic/packed_ast.html#isAtom,PackedTree,int	proc isAtom(tree: PackedTree; pos: int): bool		150
nim	copyTree	ic/packed_ast.html#copyTree,PackedTree,PackedTree,NodePos	proc copyTree(dest: var PackedTree; tree: PackedTree; n: NodePos)		152
nim	prepare	ic/packed_ast.html#prepare,PackedTree,TNodeKind,TNodeFlags,PackedItemId,PackedLineInfo	proc prepare(tree: var PackedTree; kind: TNodeKind; flags: TNodeFlags;\n        typeId: PackedItemId; info: PackedLineInfo): PatchPos		177
nim	prepare	ic/packed_ast.html#prepare,PackedTree,PackedTree,NodePos	proc prepare(dest: var PackedTree; source: PackedTree; sourcePos: NodePos): PatchPos		182
nim	patch	ic/packed_ast.html#patch,PackedTree,PatchPos	proc patch(tree: var PackedTree; pos: PatchPos)		186
nim	len	ic/packed_ast.html#len,PackedTree	proc len(tree: PackedTree): int		192
nim	`[]`	ic/packed_ast.html#[],PackedTree,int	proc `[]`(tree: PackedTree; i: int): lent PackedNode		194
nim	sonsReadonly	ic/packed_ast.html#sonsReadonly.i,PackedTree,NodePos	iterator sonsReadonly(tree: PackedTree; n: NodePos): NodePos		204
nim	sons	ic/packed_ast.html#sons.i,PackedTree,PackedTree,NodePos	iterator sons(dest: var PackedTree; tree: PackedTree; n: NodePos): NodePos		213
nim	isons	ic/packed_ast.html#isons.i,PackedTree,PackedTree,NodePos	iterator isons(dest: var PackedTree; tree: PackedTree; n: NodePos): (int, NodePos)		218
nim	sonsFrom1	ic/packed_ast.html#sonsFrom1.i,PackedTree,NodePos	iterator sonsFrom1(tree: PackedTree; n: NodePos): NodePos		225
nim	sonsWithoutLast2	ic/packed_ast.html#sonsWithoutLast2.i,PackedTree,NodePos	iterator sonsWithoutLast2(tree: PackedTree; n: NodePos): NodePos		236
nim	parent	ic/packed_ast.html#parent.t,NodePos	template parent(n: NodePos): NodePos		257
nim	hasXsons	ic/packed_ast.html#hasXsons,PackedTree,NodePos,int	proc hasXsons(tree: PackedTree; n: NodePos; x: int): bool		259
nim	hasAtLeastXsons	ic/packed_ast.html#hasAtLeastXsons,PackedTree,NodePos,int	proc hasAtLeastXsons(tree: PackedTree; n: NodePos; x: int): bool		265
nim	firstSon	ic/packed_ast.html#firstSon,PackedTree,NodePos	proc firstSon(tree: PackedTree; n: NodePos): NodePos		273
nim	kind	ic/packed_ast.html#kind,PackedTree,NodePos	proc kind(tree: PackedTree; n: NodePos): TNodeKind		275
nim	litId	ic/packed_ast.html#litId,PackedTree,NodePos	proc litId(tree: PackedTree; n: NodePos): LitId		277
nim	info	ic/packed_ast.html#info,PackedTree,NodePos	proc info(tree: PackedTree; n: NodePos): PackedLineInfo		279
nim	typ	ic/packed_ast.html#typ.t,NodePos	template typ(n: NodePos): PackedItemId		282
nim	flags	ic/packed_ast.html#flags.t,NodePos	template flags(n: NodePos): TNodeFlags		284
nim	operand	ic/packed_ast.html#operand.t,NodePos	template operand(n: NodePos): int32		287
nim	span	ic/packed_ast.html#span,PackedTree,int	proc span(tree: PackedTree; pos: int): int		290
nim	sons2	ic/packed_ast.html#sons2,PackedTree,NodePos	proc sons2(tree: PackedTree; n: NodePos): (NodePos, NodePos)		293
nim	sons3	ic/packed_ast.html#sons3,PackedTree,NodePos	proc sons3(tree: PackedTree; n: NodePos): (NodePos, NodePos, NodePos)		299
nim	ithSon	ic/packed_ast.html#ithSon,PackedTree,NodePos,int	proc ithSon(tree: PackedTree; n: NodePos; i: int): NodePos		306
nim	kind	ic/packed_ast.html#kind.t,NodePos	template kind(n: NodePos): TNodeKind		318
nim	info	ic/packed_ast.html#info.t,NodePos	template info(n: NodePos): PackedLineInfo		319
nim	litId	ic/packed_ast.html#litId.t,NodePos	template litId(n: NodePos): LitId		320
nim	symId	ic/packed_ast.html#symId.t,NodePos	template symId(n: NodePos): SymId		322
nim	firstSon	ic/packed_ast.html#firstSon,NodePos	proc firstSon(n: NodePos): NodePos		324
nim	externIntLit	ic/packed_ast.html#externIntLit	const externIntLit		353
nim	externSIntLit	ic/packed_ast.html#externSIntLit	const externSIntLit		364
nim	externUIntLit	ic/packed_ast.html#externUIntLit	const externUIntLit		365
nim	directIntLit	ic/packed_ast.html#directIntLit	const directIntLit		366
nim	copyInto	ic/packed_ast.html#copyInto.t,,,	template copyInto(dest, n, body)		379
nim	copyIntoKind	ic/packed_ast.html#copyIntoKind.t,,,,	template copyIntoKind(dest, kind, info, body)		384
nim	getNodeId	ic/packed_ast.html#getNodeId,PackedTree	proc getNodeId(tree: PackedTree): NodeId		402
nim	allNodes	ic/packed_ast.html#allNodes.i,PackedTree	iterator allNodes(tree: PackedTree): NodePos		411
nim	toPackedItemId	ic/packed_ast.html#toPackedItemId,int32	proc toPackedItemId(item: int32): PackedItemId		418
nimgrp	prepare	ic/packed_ast.html#prepare-procs-all	proc		177
nimgrp	firstson	ic/packed_ast.html#firstSon-procs-all	proc		273
nimgrp	==	ic/packed_ast.html#==-procs-all	proc		108
