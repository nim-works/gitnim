SigHash	modulegraphs.html#SigHash	modulegraphs: SigHash	
LazySym	modulegraphs.html#LazySym	modulegraphs: LazySym	
Iface	modulegraphs.html#Iface	modulegraphs: Iface	
Operators	modulegraphs.html#Operators	modulegraphs: Operators	
FullId	modulegraphs.html#FullId	modulegraphs: FullId	
LazyType	modulegraphs.html#LazyType	modulegraphs: LazyType	
LazyInstantiation	modulegraphs.html#LazyInstantiation	modulegraphs: LazyInstantiation	
ModuleGraph	modulegraphs.html#ModuleGraph	modulegraphs: ModuleGraph	
TPassContext	modulegraphs.html#TPassContext	modulegraphs: TPassContext	
PPassContext	modulegraphs.html#PPassContext	modulegraphs: PPassContext	
TPassOpen	modulegraphs.html#TPassOpen	modulegraphs: TPassOpen	
TPassClose	modulegraphs.html#TPassClose	modulegraphs: TPassClose	
TPassProcess	modulegraphs.html#TPassProcess	modulegraphs: TPassProcess	
TPass	modulegraphs.html#TPass	modulegraphs: TPass	
resetForBackend	modulegraphs.html#resetForBackend,ModuleGraph	modulegraphs: resetForBackend(g: ModuleGraph)	
semtabAll	modulegraphs.html#semtabAll.t,ModuleGraph,PSym	modulegraphs: semtabAll(g: ModuleGraph; m: PSym): TStrTable	
initStrTables	modulegraphs.html#initStrTables,ModuleGraph,PSym	modulegraphs: initStrTables(g: ModuleGraph; m: PSym)	
strTableAdds	modulegraphs.html#strTableAdds,ModuleGraph,PSym,PSym	modulegraphs: strTableAdds(g: ModuleGraph; m: PSym; s: PSym)	
simulateCachedModule	modulegraphs.html#simulateCachedModule,ModuleGraph,PSym,PackedModule	modulegraphs: simulateCachedModule(g: ModuleGraph; moduleSym: PSym; m: PackedModule)	
initEncoder	modulegraphs.html#initEncoder,ModuleGraph,PSym	modulegraphs: initEncoder(g: ModuleGraph; module: PSym)	
ModuleIter	modulegraphs.html#ModuleIter	modulegraphs: ModuleIter	
initModuleIter	modulegraphs.html#initModuleIter,ModuleIter,ModuleGraph,PSym,PIdent	modulegraphs: initModuleIter(mi: var ModuleIter; g: ModuleGraph; m: PSym; name: PIdent): PSym	
nextModuleIter	modulegraphs.html#nextModuleIter,ModuleIter,ModuleGraph	modulegraphs: nextModuleIter(mi: var ModuleIter; g: ModuleGraph): PSym	
allSyms	modulegraphs.html#allSyms.i,ModuleGraph,PSym	modulegraphs: allSyms(g: ModuleGraph; m: PSym): PSym	
someSym	modulegraphs.html#someSym,ModuleGraph,PSym,PIdent	modulegraphs: someSym(g: ModuleGraph; m: PSym; name: PIdent): PSym	
systemModuleSym	modulegraphs.html#systemModuleSym,ModuleGraph,PIdent	modulegraphs: systemModuleSym(g: ModuleGraph; name: PIdent): PSym	
systemModuleSyms	modulegraphs.html#systemModuleSyms.i,ModuleGraph,PIdent	modulegraphs: systemModuleSyms(g: ModuleGraph; name: PIdent): PSym	
typeInstCacheItems	modulegraphs.html#typeInstCacheItems.i,ModuleGraph,PSym	modulegraphs: typeInstCacheItems(g: ModuleGraph; s: PSym): PType	
procInstCacheItems	modulegraphs.html#procInstCacheItems.i,ModuleGraph,PSym	modulegraphs: procInstCacheItems(g: ModuleGraph; s: PSym): PInstantiation	
getAttachedOp	modulegraphs.html#getAttachedOp,ModuleGraph,PType,TTypeAttachedOp	modulegraphs: getAttachedOp(g: ModuleGraph; t: PType; op: TTypeAttachedOp): PSym	
setAttachedOp	modulegraphs.html#setAttachedOp,ModuleGraph,int,PType,TTypeAttachedOp,PSym	modulegraphs: setAttachedOp(g: ModuleGraph; module: int; t: PType; op: TTypeAttachedOp;\n              value: PSym)	
setAttachedOpPartial	modulegraphs.html#setAttachedOpPartial,ModuleGraph,int,PType,TTypeAttachedOp,PSym	modulegraphs: setAttachedOpPartial(g: ModuleGraph; module: int; t: PType; op: TTypeAttachedOp;\n                     value: PSym)	
completePartialOp	modulegraphs.html#completePartialOp,ModuleGraph,int,PType,TTypeAttachedOp,PSym	modulegraphs: completePartialOp(g: ModuleGraph; module: int; t: PType; op: TTypeAttachedOp;\n                  value: PSym)	
getToStringProc	modulegraphs.html#getToStringProc,ModuleGraph,PType	modulegraphs: getToStringProc(g: ModuleGraph; t: PType): PSym	
setToStringProc	modulegraphs.html#setToStringProc,ModuleGraph,PType,PSym	modulegraphs: setToStringProc(g: ModuleGraph; t: PType; value: PSym)	
methodsForGeneric	modulegraphs.html#methodsForGeneric.i,ModuleGraph,PType	modulegraphs: methodsForGeneric(g: ModuleGraph; t: PType): (int, PSym)	
addMethodToGeneric	modulegraphs.html#addMethodToGeneric,ModuleGraph,int,PType,int,PSym	modulegraphs: addMethodToGeneric(g: ModuleGraph; module: int; t: PType; col: int; m: PSym)	
hasDisabledAsgn	modulegraphs.html#hasDisabledAsgn,ModuleGraph,PType	modulegraphs: hasDisabledAsgn(g: ModuleGraph; t: PType): bool	
copyTypeProps	modulegraphs.html#copyTypeProps,ModuleGraph,int,PType,PType	modulegraphs: copyTypeProps(g: ModuleGraph; module: int; dest, src: PType)	
loadCompilerProc	modulegraphs.html#loadCompilerProc,ModuleGraph,string	modulegraphs: loadCompilerProc(g: ModuleGraph; name: string): PSym	
loadPackedSym	modulegraphs.html#loadPackedSym,ModuleGraph,LazySym	modulegraphs: loadPackedSym(g: ModuleGraph; s: var LazySym)	
`$`	modulegraphs.html#$,SigHash	modulegraphs: `$`(u: SigHash): string	
`==`	modulegraphs.html#==,SigHash,SigHash	modulegraphs: `==`(a, b: SigHash): bool	
hash	modulegraphs.html#hash,SigHash	modulegraphs: hash(u: SigHash): Hash	
hash	modulegraphs.html#hash,FileIndex	modulegraphs: hash(x: FileIndex): Hash	
onUse	modulegraphs.html#onUse.t,TLineInfo,PSym	modulegraphs: onUse(info: TLineInfo; s: PSym)	
onDef	modulegraphs.html#onDef.t,TLineInfo,PSym	modulegraphs: onDef(info: TLineInfo; s: PSym)	
onDefResolveForward	modulegraphs.html#onDefResolveForward.t,TLineInfo,PSym	modulegraphs: onDefResolveForward(info: TLineInfo; s: PSym)	
stopCompile	modulegraphs.html#stopCompile,ModuleGraph	modulegraphs: stopCompile(g: ModuleGraph): bool	
createMagic	modulegraphs.html#createMagic,ModuleGraph,IdGenerator,string,TMagic	modulegraphs: createMagic(g: ModuleGraph; idgen: IdGenerator; name: string; m: TMagic): PSym	
registerModule	modulegraphs.html#registerModule,ModuleGraph,PSym	modulegraphs: registerModule(g: ModuleGraph; m: PSym)	
registerModuleById	modulegraphs.html#registerModuleById,ModuleGraph,FileIndex	modulegraphs: registerModuleById(g: ModuleGraph; m: FileIndex)	
initOperators	modulegraphs.html#initOperators,ModuleGraph	modulegraphs: initOperators(g: ModuleGraph): Operators	
newModuleGraph	modulegraphs.html#newModuleGraph,IdentCache,ConfigRef	modulegraphs: newModuleGraph(cache: IdentCache; config: ConfigRef): ModuleGraph	
resetAllModules	modulegraphs.html#resetAllModules,ModuleGraph	modulegraphs: resetAllModules(g: ModuleGraph)	
getModule	modulegraphs.html#getModule,ModuleGraph,FileIndex	modulegraphs: getModule(g: ModuleGraph; fileIdx: FileIndex): PSym	
moduleOpenForCodegen	modulegraphs.html#moduleOpenForCodegen,ModuleGraph,FileIndex	modulegraphs: moduleOpenForCodegen(g: ModuleGraph; m: FileIndex): bool	
rememberEmittedTypeInfo	modulegraphs.html#rememberEmittedTypeInfo,ModuleGraph,FileIndex,string	modulegraphs: rememberEmittedTypeInfo(g: ModuleGraph; m: FileIndex; ti: string)	
rememberFlag	modulegraphs.html#rememberFlag,ModuleGraph,PSym,ModuleBackendFlag	modulegraphs: rememberFlag(g: ModuleGraph; m: PSym; flag: ModuleBackendFlag)	
closeRodFile	modulegraphs.html#closeRodFile,ModuleGraph,PSym	modulegraphs: closeRodFile(g: ModuleGraph; m: PSym)	
addDep	modulegraphs.html#addDep,ModuleGraph,PSym,FileIndex	modulegraphs: addDep(g: ModuleGraph; m: PSym; dep: FileIndex)	
addIncludeDep	modulegraphs.html#addIncludeDep,ModuleGraph,FileIndex,FileIndex	modulegraphs: addIncludeDep(g: ModuleGraph; module, includeFile: FileIndex)	
parentModule	modulegraphs.html#parentModule,ModuleGraph,FileIndex	modulegraphs: parentModule(g: ModuleGraph; fileIdx: FileIndex): FileIndex	
markDirty	modulegraphs.html#markDirty,ModuleGraph,FileIndex	modulegraphs: markDirty(g: ModuleGraph; fileIdx: FileIndex)	
markClientsDirty	modulegraphs.html#markClientsDirty,ModuleGraph,FileIndex	modulegraphs: markClientsDirty(g: ModuleGraph; fileIdx: FileIndex)	
isDirty	modulegraphs.html#isDirty,ModuleGraph,PSym	modulegraphs: isDirty(g: ModuleGraph; m: PSym): bool	
getBody	modulegraphs.html#getBody,ModuleGraph,PSym	modulegraphs: getBody(g: ModuleGraph; s: PSym): PNode	
moduleFromRodFile	modulegraphs.html#moduleFromRodFile,ModuleGraph,FileIndex,seq[FileIndex]	modulegraphs: moduleFromRodFile(g: ModuleGraph; fileIdx: FileIndex;\n                  cachedModules: var seq[FileIndex]): PSym	
configComplete	modulegraphs.html#configComplete,ModuleGraph	modulegraphs: configComplete(g: ModuleGraph)	
