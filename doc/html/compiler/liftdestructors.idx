destructor	liftdestructors.html#destructor.t,PType	liftdestructors: destructor(t: PType): PSym	
assignment	liftdestructors.html#assignment.t,PType	liftdestructors: assignment(t: PType): PSym	
asink	liftdestructors.html#asink.t,PType	liftdestructors: asink(t: PType): PSym	
genBuiltin	liftdestructors.html#genBuiltin,ModuleGraph,IdGenerator,TMagic,string,PNode	liftdestructors: genBuiltin(g: ModuleGraph; idgen: IdGenerator; magic: TMagic; name: string;\n           i: PNode): PNode	
boolLit	liftdestructors.html#boolLit,ModuleGraph,TLineInfo,bool	liftdestructors: boolLit(g: ModuleGraph; info: TLineInfo; value: bool): PNode	
cyclicType	liftdestructors.html#cyclicType,PType	liftdestructors: cyclicType(t: PType): bool	
produceDestructorForDiscriminator	liftdestructors.html#produceDestructorForDiscriminator,ModuleGraph,PType,PSym,TLineInfo,IdGenerator	liftdestructors: produceDestructorForDiscriminator(g: ModuleGraph; typ: PType; field: PSym;\n                                  info: TLineInfo; idgen: IdGenerator): PSym	
liftTypeBoundOps	liftdestructors.html#liftTypeBoundOps.t,PContext,PType,TLineInfo	liftdestructors: liftTypeBoundOps(c: PContext; typ: PType; info: TLineInfo)	
createTypeBoundOps	liftdestructors.html#createTypeBoundOps,ModuleGraph,PContext,PType,TLineInfo,IdGenerator	liftdestructors: createTypeBoundOps(g: ModuleGraph; c: PContext; orig: PType; info: TLineInfo;\n                   idgen: IdGenerator)	
