considerQuotedIdent	lookups.html#considerQuotedIdent,PContext,PNode,PNode	lookups: considerQuotedIdent(c: PContext; n: PNode; origin: PNode = nil): PIdent	
addSym	lookups.html#addSym.t,PScope,PSym	lookups: addSym(scope: PScope; s: PSym)	
addUniqueSym	lookups.html#addUniqueSym,PScope,PSym	lookups: addUniqueSym(scope: PScope; s: PSym): PSym	
openScope	lookups.html#openScope,PContext	lookups: openScope(c: PContext): PScope	
rawCloseScope	lookups.html#rawCloseScope,PContext	lookups: rawCloseScope(c: PContext)	
closeScope	lookups.html#closeScope,PContext	lookups: closeScope(c: PContext)	
allScopes	lookups.html#allScopes.i,PScope	lookups: allScopes(scope: PScope): PScope	
localScopesFrom	lookups.html#localScopesFrom.i,PContext,PScope	lookups: localScopesFrom(c: PContext; scope: PScope): PScope	
skipAlias	lookups.html#skipAlias,PSym,PNode,ConfigRef	lookups: skipAlias(s: PSym; n: PNode; conf: ConfigRef): PSym	
isShadowScope	lookups.html#isShadowScope,PScope	lookups: isShadowScope(s: PScope): bool	
localSearchInScope	lookups.html#localSearchInScope,PContext,PIdent	lookups: localSearchInScope(c: PContext; s: PIdent): PSym	
importedItems	lookups.html#importedItems.i,PContext,PIdent	lookups: importedItems(c: PContext; name: PIdent): PSym	
allSyms	lookups.html#allSyms.i,PContext	lookups: allSyms(c: PContext): (PSym, int, bool)	
someSymFromImportTable	lookups.html#someSymFromImportTable,PContext,PIdent,bool	lookups: someSymFromImportTable(c: PContext; name: PIdent; ambiguous: var bool): PSym	
searchInScopes	lookups.html#searchInScopes,PContext,PIdent,bool	lookups: searchInScopes(c: PContext; s: PIdent; ambiguous: var bool): PSym	
debugScopes	lookups.html#debugScopes,PContext,int	lookups: debugScopes(c: PContext; limit = 0; max = int.high)	
searchInScopesFilterBy	lookups.html#searchInScopesFilterBy,PContext,PIdent,TSymKinds	lookups: searchInScopesFilterBy(c: PContext; s: PIdent; filter: TSymKinds): seq[PSym]	
errorSym	lookups.html#errorSym,PContext,PNode	lookups: errorSym(c: PContext; n: PNode): PSym	
oimDone	lookups.html#oimDone	TOverloadIterMode.oimDone	
oimNoQualifier	lookups.html#oimNoQualifier	TOverloadIterMode.oimNoQualifier	
oimSelfModule	lookups.html#oimSelfModule	TOverloadIterMode.oimSelfModule	
oimOtherModule	lookups.html#oimOtherModule	TOverloadIterMode.oimOtherModule	
oimSymChoice	lookups.html#oimSymChoice	TOverloadIterMode.oimSymChoice	
oimSymChoiceLocalLookup	lookups.html#oimSymChoiceLocalLookup	TOverloadIterMode.oimSymChoiceLocalLookup	
TOverloadIterMode	lookups.html#TOverloadIterMode	lookups: TOverloadIterMode	
TOverloadIter	lookups.html#TOverloadIter	lookups: TOverloadIter	
getSymRepr	lookups.html#getSymRepr,ConfigRef,PSym	lookups: getSymRepr(conf: ConfigRef; s: PSym; getDeclarationPath = true): string	
wrongRedefinition	lookups.html#wrongRedefinition,PContext,TLineInfo,string,TLineInfo	lookups: wrongRedefinition(c: PContext; info: TLineInfo; s: string;\n                  conflictsWith: TLineInfo)	
addDecl	lookups.html#addDecl,PContext,PSym,TLineInfo	lookups: addDecl(c: PContext; sym: PSym; info: TLineInfo)	
addDecl	lookups.html#addDecl,PContext,PSym	lookups: addDecl(c: PContext; sym: PSym)	
addPrelimDecl	lookups.html#addPrelimDecl,PContext,PSym	lookups: addPrelimDecl(c: PContext; sym: PSym)	
addDeclAt	lookups.html#addDeclAt,PContext,PScope,PSym	lookups: addDeclAt(c: PContext; scope: PScope; sym: PSym)	
addInterfaceDeclAux	lookups.html#addInterfaceDeclAux,PContext,PSym	lookups: addInterfaceDeclAux(c: PContext; sym: PSym; forceExport = false)	
addInterfaceDeclAt	lookups.html#addInterfaceDeclAt,PContext,PScope,PSym	lookups: addInterfaceDeclAt(c: PContext; scope: PScope; sym: PSym)	
addOverloadableSymAt	lookups.html#addOverloadableSymAt,PContext,PScope,PSym	lookups: addOverloadableSymAt(c: PContext; scope: PScope; fn: PSym)	
addInterfaceDecl	lookups.html#addInterfaceDecl,PContext,PSym	lookups: addInterfaceDecl(c: PContext; sym: PSym)	
addInterfaceOverloadableSymAt	lookups.html#addInterfaceOverloadableSymAt,PContext,PScope,PSym	lookups: addInterfaceOverloadableSymAt(c: PContext; scope: PScope; sym: PSym)	
openShadowScope	lookups.html#openShadowScope,PContext	lookups: openShadowScope(c: PContext)	
closeShadowScope	lookups.html#closeShadowScope,PContext	lookups: closeShadowScope(c: PContext)	
mergeShadowScope	lookups.html#mergeShadowScope,PContext	lookups: mergeShadowScope(c: PContext)	
errorUseQualifier	lookups.html#errorUseQualifier,PContext,TLineInfo,PSym	lookups: errorUseQualifier(c: PContext; info: TLineInfo; s: PSym)	
errorUndeclaredIdentifier	lookups.html#errorUndeclaredIdentifier,PContext,TLineInfo,string,string	lookups: errorUndeclaredIdentifier(c: PContext; info: TLineInfo; name: string; extra = &quot;&quot;)	
errorUndeclaredIdentifierHint	lookups.html#errorUndeclaredIdentifierHint,PContext,PNode,PIdent	lookups: errorUndeclaredIdentifierHint(c: PContext; n: PNode; ident: PIdent): PSym	
lookUp	lookups.html#lookUp,PContext,PNode	lookups: lookUp(c: PContext; n: PNode): PSym	
checkAmbiguity	lookups.html#checkAmbiguity	TLookupFlag.checkAmbiguity	
checkUndeclared	lookups.html#checkUndeclared	TLookupFlag.checkUndeclared	
checkModule	lookups.html#checkModule	TLookupFlag.checkModule	
checkPureEnumFields	lookups.html#checkPureEnumFields	TLookupFlag.checkPureEnumFields	
TLookupFlag	lookups.html#TLookupFlag	lookups: TLookupFlag	
qualifiedLookUp	lookups.html#qualifiedLookUp,PContext,PNode,set[TLookupFlag]	lookups: qualifiedLookUp(c: PContext; n: PNode; flags: set[TLookupFlag]): PSym	
initOverloadIter	lookups.html#initOverloadIter,TOverloadIter,PContext,PNode	lookups: initOverloadIter(o: var TOverloadIter; c: PContext; n: PNode): PSym	
lastOverloadScope	lookups.html#lastOverloadScope,TOverloadIter	lookups: lastOverloadScope(o: TOverloadIter): int	
nextOverloadIter	lookups.html#nextOverloadIter,TOverloadIter,PContext,PNode	lookups: nextOverloadIter(o: var TOverloadIter; c: PContext; n: PNode): PSym	
pickSym	lookups.html#pickSym,PContext,PNode,set[TSymKind],TSymFlags	lookups: pickSym(c: PContext; n: PNode; kinds: set[TSymKind]; flags: TSymFlags = {}): PSym	
