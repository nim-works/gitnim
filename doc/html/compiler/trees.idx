nimTitle	trees	trees.html	module trees		0
nim	cyclicTree	trees.html#cyclicTree,PNode	proc cyclicTree(n: PNode): bool		25
nim	exprStructuralEquivalent	trees.html#exprStructuralEquivalent,PNode,PNode	proc exprStructuralEquivalent(a, b: PNode; strictSymEquality = false): bool		33
nim	sameTree	trees.html#sameTree,PNode,PNode	proc sameTree(a, b: PNode): bool		57
nim	getMagic	trees.html#getMagic,PNode	proc getMagic(op: PNode): TMagic		80
nim	isConstExpr	trees.html#isConstExpr,PNode	proc isConstExpr(n: PNode): bool		89
nim	isCaseObj	trees.html#isCaseObj,PNode	proc isCaseObj(n: PNode): bool		93
nim	isDeepConstExpr	trees.html#isDeepConstExpr,PNode	proc isDeepConstExpr(n: PNode; preventInheritance = false): bool		98
nim	isRange	trees.html#isRange,PNode	proc isRange(n: PNode): bool		122
nim	whichPragma	trees.html#whichPragma,PNode	proc whichPragma(n: PNode): TSpecialWord		131
nim	isNoSideEffectPragma	trees.html#isNoSideEffectPragma,PNode	proc isNoSideEffectPragma(n: PNode): bool		141
nim	findPragma	trees.html#findPragma,PNode,TSpecialWord	proc findPragma(n: PNode; which: TSpecialWord): PNode		147
nim	effectSpec	trees.html#effectSpec,PNode,TSpecialWord	proc effectSpec(n: PNode; effectType: TSpecialWord): PNode		153
nim	propSpec	trees.html#propSpec,PNode,TSpecialWord	proc propSpec(n: PNode; effectType: TSpecialWord): PNode		163
nim	flattenStmts	trees.html#flattenStmts,PNode	proc flattenStmts(n: PNode): PNode		175
nim	extractRange	trees.html#extractRange,TNodeKind,PNode,int,int	proc extractRange(k: TNodeKind; n: PNode; a, b: int): PNode		181
nim	isTrue	trees.html#isTrue,PNode	proc isTrue(n: PNode): bool		185
nim	getRoot	trees.html#getRoot,PNode	proc getRoot(n: PNode): PSym		189
nim	stupidStmtListExpr	trees.html#stupidStmtListExpr,PNode	proc stupidStmtListExpr(n: PNode): bool		206
nim	dontInlineConstant	trees.html#dontInlineConstant,PNode,PNode	proc dontInlineConstant(orig, cnst: PNode): bool		211
nim	isRunnableExamples	trees.html#isRunnableExamples,PNode	proc isRunnableExamples(n: PNode): bool		218
