nimTitle	types	types.html	module types		0
nim	preferName	types.html#preferName	TPreferedDesc.preferName		22
nim	preferDesc	types.html#preferDesc	TPreferedDesc.preferDesc		22
nim	preferExported	types.html#preferExported	TPreferedDesc.preferExported		22
nim	preferModuleInfo	types.html#preferModuleInfo	TPreferedDesc.preferModuleInfo		22
nim	preferGenericArg	types.html#preferGenericArg	TPreferedDesc.preferGenericArg		22
nim	preferTypeName	types.html#preferTypeName	TPreferedDesc.preferTypeName		22
nim	preferResolved	types.html#preferResolved	TPreferedDesc.preferResolved		22
nim	preferMixed	types.html#preferMixed	TPreferedDesc.preferMixed		22
nim	preferInlayHint	types.html#preferInlayHint	TPreferedDesc.preferInlayHint		22
nim	TPreferedDesc	types.html#TPreferedDesc	enum TPreferedDesc		22
nim	isNone	types.html#isNone	TTypeRelation.isNone		35
nim	isConvertible	types.html#isConvertible	TTypeRelation.isConvertible		35
nim	isIntConv	types.html#isIntConv	TTypeRelation.isIntConv		35
nim	isSubtype	types.html#isSubtype	TTypeRelation.isSubtype		35
nim	isSubrange	types.html#isSubrange	TTypeRelation.isSubrange		35
nim	isBothMetaConvertible	types.html#isBothMetaConvertible	TTypeRelation.isBothMetaConvertible		35
nim	isInferred	types.html#isInferred	TTypeRelation.isInferred		35
nim	isInferredConvertible	types.html#isInferredConvertible	TTypeRelation.isInferredConvertible		35
nim	isGeneric	types.html#isGeneric	TTypeRelation.isGeneric		35
nim	isFromIntLit	types.html#isFromIntLit	TTypeRelation.isFromIntLit		35
nim	isEqual	types.html#isEqual	TTypeRelation.isEqual		35
nim	TTypeRelation	types.html#TTypeRelation	enum TTypeRelation		35
nim	pcmNoSideEffect	types.html#pcmNoSideEffect	ProcConvMismatch.pcmNoSideEffect		51
nim	pcmNotGcSafe	types.html#pcmNotGcSafe	ProcConvMismatch.pcmNotGcSafe		51
nim	pcmNotIterator	types.html#pcmNotIterator	ProcConvMismatch.pcmNotIterator		51
nim	pcmDifferentCallConv	types.html#pcmDifferentCallConv	ProcConvMismatch.pcmDifferentCallConv		51
nim	ProcConvMismatch	types.html#ProcConvMismatch	enum ProcConvMismatch		51
nim	typeToString	types.html#typeToString,PType,TPreferedDesc	proc typeToString(typ: PType; prefer: TPreferedDesc = preferName): string		57
nim	addTypeDeclVerboseMaybe	types.html#addTypeDeclVerboseMaybe,string,ConfigRef,PType	proc addTypeDeclVerboseMaybe(result: var string; conf: ConfigRef; typ: PType)		59
nim	`$`	types.html#$.t,PType	template `$`(typ: PType): string		66
nim	TTypeIter	types.html#TTypeIter	type TTypeIter		70
nim	TTypePredicate	types.html#TTypePredicate	type TTypePredicate		71
nim	iterOverType	types.html#iterOverType,PType,TTypeIter,RootRef	proc iterOverType(t: PType; iter: TTypeIter; closure: RootRef): bool		73
nim	paramsNotEqual	types.html#paramsNotEqual	TParamsEquality.paramsNotEqual		77
nim	paramsEqual	types.html#paramsEqual	TParamsEquality.paramsEqual		77
nim	paramsIncompatible	types.html#paramsIncompatible	TParamsEquality.paramsIncompatible		77
nim	TParamsEquality	types.html#TParamsEquality	enum TParamsEquality		77
nim	equalParams	types.html#equalParams,PNode,PNode	proc equalParams(a, b: PNode): TParamsEquality		86
nim	abstractPtrs	types.html#abstractPtrs	const abstractPtrs		92
nim	abstractVar	types.html#abstractVar	const abstractVar		94
nim	abstractRange	types.html#abstractRange	const abstractRange		96
nim	abstractInstOwned	types.html#abstractInstOwned	const abstractInstOwned		98
nim	skipPtrs	types.html#skipPtrs	const skipPtrs		99
nim	typedescPtrs	types.html#typedescPtrs	const typedescPtrs		102
nim	typedescInst	types.html#typedescInst	const typedescInst		103
nim	invalidGenericInst	types.html#invalidGenericInst,PType	proc invalidGenericInst(f: PType): bool		105
nim	isPureObject	types.html#isPureObject,PType	proc isPureObject(typ: PType): bool		108
nim	isUnsigned	types.html#isUnsigned,PType	proc isUnsigned(t: PType): bool		114
nim	getOrdValue	types.html#getOrdValue,PNode	proc getOrdValue(n: PNode; onError = high(Int128)): Int128		117
nim	getFloatValue	types.html#getFloatValue,PNode	proc getFloatValue(n: PNode): BiggestFloat		141
nim	isIntLit	types.html#isIntLit,PType	proc isIntLit(t: PType): bool		147
nim	isFloatLit	types.html#isFloatLit,PType	proc isFloatLit(t: PType): bool		150
nim	addTypeHeader	types.html#addTypeHeader,string,ConfigRef,PType,TPreferedDesc	proc addTypeHeader(result: var string; conf: ConfigRef; typ: PType;\n              prefer: TPreferedDesc = preferMixed; getDeclarationPath = true)		153
nim	getProcHeader	types.html#getProcHeader,ConfigRef,PSym,TPreferedDesc	proc getProcHeader(conf: ConfigRef; sym: PSym; prefer: TPreferedDesc = preferName;\n              getDeclarationPath = true): string		157
nim	elemType	types.html#elemType,PType	proc elemType(t: PType): PType		178
nim	enumHasHoles	types.html#enumHasHoles,PType	proc enumHasHoles(t: PType): bool		187
nim	isOrdinalType	types.html#isOrdinalType,PType,bool	proc isOrdinalType(t: PType; allowEnumWithHoles: bool = false): bool		191
nim	searchTypeFor	types.html#searchTypeFor,PType,TTypePredicate	proc searchTypeFor(t: PType; predicate: TTypePredicate): bool		284
nim	containsObject	types.html#containsObject,PType	proc containsObject(t: PType): bool		291
nim	frNone	types.html#frNone	TTypeFieldResult.frNone		300
nim	frHeader	types.html#frHeader	TTypeFieldResult.frHeader		300
nim	frEmbedded	types.html#frEmbedded	TTypeFieldResult.frEmbedded		300
nim	TTypeFieldResult	types.html#TTypeFieldResult	enum TTypeFieldResult		300
nim	analyseObjectWithTypeField	types.html#analyseObjectWithTypeField,PType	proc analyseObjectWithTypeField(t: PType): TTypeFieldResult		332
nim	containsGarbageCollectedRef	types.html#containsGarbageCollectedRef,PType	proc containsGarbageCollectedRef(typ: PType): bool		345
nim	containsManagedMemory	types.html#containsManagedMemory,PType	proc containsManagedMemory(typ: PType): bool		354
nim	containsTyRef	types.html#containsTyRef,PType	proc containsTyRef(typ: PType): bool		360
nim	containsHiddenPointer	types.html#containsHiddenPointer,PType	proc containsHiddenPointer(typ: PType): bool		367
nim	sameBackendType	types.html#sameBackendType,PType,PType	proc sameBackendType(x, y: PType): bool		390
nim	isFinal	types.html#isFinal,PType	proc isFinal(t: PType): bool		437
nim	canFormAcycle	types.html#canFormAcycle,ModuleGraph,PType	proc canFormAcycle(g: ModuleGraph; typ: PType): bool		441
nim	bindConcreteTypeToUserTypeClass	types.html#bindConcreteTypeToUserTypeClass.t,PType,PType	template bindConcreteTypeToUserTypeClass(tc, concrete: PType)		482
nim	isResolvedUserTypeClass	types.html#isResolvedUserTypeClass.t,PType	template isResolvedUserTypeClass(t: PType): bool		492
nim	firstOrd	types.html#firstOrd,ConfigRef,PType	proc firstOrd(conf: ConfigRef; t: PType): Int128		752
nim	firstFloat	types.html#firstFloat,PType	proc firstFloat(t: PType): BiggestFloat		803
nim	targetSizeSignedToKind	types.html#targetSizeSignedToKind,ConfigRef	proc targetSizeSignedToKind(conf: ConfigRef): TTypeKind		820
nim	targetSizeUnsignedToKind	types.html#targetSizeUnsignedToKind,ConfigRef	proc targetSizeUnsignedToKind(conf: ConfigRef): TTypeKind		827
nim	normalizeKind	types.html#normalizeKind,ConfigRef,TTypeKind	proc normalizeKind(conf: ConfigRef; k: TTypeKind): TTypeKind		834
nim	lastOrd	types.html#lastOrd,ConfigRef,PType	proc lastOrd(conf: ConfigRef; t: PType): Int128		843
nim	lastFloat	types.html#lastFloat,PType	proc lastFloat(t: PType): BiggestFloat		899
nim	floatRangeCheck	types.html#floatRangeCheck,BiggestFloat,PType	proc floatRangeCheck(x: BiggestFloat; t: PType): bool		916
nim	lengthOrd	types.html#lengthOrd,ConfigRef,PType	proc lengthOrd(conf: ConfigRef; t: PType): Int128		935
nim	dcEq	types.html#dcEq	TDistinctCompare.dcEq		946
nim	dcEqIgnoreDistinct	types.html#dcEqIgnoreDistinct	TDistinctCompare.dcEqIgnoreDistinct		946
nim	dcEqOrDistinctOf	types.html#dcEqOrDistinctOf	TDistinctCompare.dcEqOrDistinctOf		946
nim	TDistinctCompare	types.html#TDistinctCompare	enum TDistinctCompare		946
nim	IgnoreTupleFields	types.html#IgnoreTupleFields	TTypeCmpFlag.IgnoreTupleFields		952
nim	IgnoreCC	types.html#IgnoreCC	TTypeCmpFlag.IgnoreCC		952
nim	ExactTypeDescValues	types.html#ExactTypeDescValues	TTypeCmpFlag.ExactTypeDescValues		952
nim	ExactGenericParams	types.html#ExactGenericParams	TTypeCmpFlag.ExactGenericParams		952
nim	ExactConstraints	types.html#ExactConstraints	TTypeCmpFlag.ExactConstraints		952
nim	ExactGcSafety	types.html#ExactGcSafety	TTypeCmpFlag.ExactGcSafety		952
nim	AllowCommonBase	types.html#AllowCommonBase	TTypeCmpFlag.AllowCommonBase		952
nim	PickyCAliases	types.html#PickyCAliases	TTypeCmpFlag.PickyCAliases		952
nim	IgnoreFlags	types.html#IgnoreFlags	TTypeCmpFlag.IgnoreFlags		952
nim	TTypeCmpFlag	types.html#TTypeCmpFlag	enum TTypeCmpFlag		952
nim	TTypeCmpFlags	types.html#TTypeCmpFlags	type TTypeCmpFlags		963
nim	sameType	types.html#sameType,PType,PType,TTypeCmpFlags	proc sameType(a, b: PType; flags: TTypeCmpFlags = {}): bool		989
nim	sameTypeOrNil	types.html#sameTypeOrNil,PType,PType,TTypeCmpFlags	proc sameTypeOrNil(a, b: PType; flags: TTypeCmpFlags = {}): bool		994
nim	sameObjectTypes	types.html#sameObjectTypes,PType,PType	proc sameObjectTypes(a, b: PType): bool		1106
nim	sameDistinctTypes	types.html#sameDistinctTypes,PType,PType	proc sameDistinctTypes(a, b: PType): bool		1112
nim	sameEnumTypes	types.html#sameEnumTypes,PType,PType	proc sameEnumTypes(a, b: PType): bool		1115
nim	isGenericAlias	types.html#isGenericAlias,PType	proc isGenericAlias(t: PType): bool		1162
nim	genericAliasDepth	types.html#genericAliasDepth,PType	proc genericAliasDepth(t: PType): int		1165
nim	skipGenericAlias	types.html#skipGenericAlias,PType	proc skipGenericAlias(t: PType): PType		1172
nim	sameFlags	types.html#sameFlags,PType,PType	proc sameFlags(a, b: PType): bool		1175
nim	compareTypes	types.html#compareTypes,PType,PType,TDistinctCompare,TTypeCmpFlags	proc compareTypes(x, y: PType; cmp: TDistinctCompare = dcEq;\n             flags: TTypeCmpFlags = {}): bool		1316
nim	inheritanceDiff	types.html#inheritanceDiff,PType,PType	proc inheritanceDiff(a, b: PType): int		1327
nim	commonSuperclass	types.html#commonSuperclass,PType,PType	proc commonSuperclass(a, b: PType): PType		1351
nim	szUnknownSize	types.html#szUnknownSize	const szUnknownSize		21
nim	szIllegalRecursion	types.html#szIllegalRecursion	const szIllegalRecursion		22
nim	szUncomputedSize	types.html#szUncomputedSize	const szUncomputedSize		23
nim	szTooBigSize	types.html#szTooBigSize	const szTooBigSize		24
nim	OffsetAccum	types.html#OffsetAccum	object OffsetAccum		32
nim	inc	types.html#inc,OffsetAccum,int32	proc inc(arg: var OffsetAccum; value: int32)		36
nim	align	types.html#align,OffsetAccum,int32	proc align(arg: var OffsetAccum; value: int32)		50
nim	computeSizeAlign	types.html#computeSizeAlign,ConfigRef,PType	proc computeSizeAlign(conf: ConfigRef; typ: PType)		76
nim	foldSizeOf	types.html#foldSizeOf.t,ConfigRef,PNode,PNode	template foldSizeOf(conf: ConfigRef; n: PNode; fallback: PNode): PNode		464
nim	foldAlignOf	types.html#foldAlignOf.t,ConfigRef,PNode,PNode	template foldAlignOf(conf: ConfigRef; n: PNode; fallback: PNode): PNode		478
nim	foldOffsetOf	types.html#foldOffsetOf.t,ConfigRef,PNode,PNode	template foldOffsetOf(conf: ConfigRef; n: PNode; fallback: PNode): PNode		492
nim	computeSize	types.html#computeSize,ConfigRef,PType	proc computeSize(conf: ConfigRef; typ: PType): BiggestInt		1379
nim	getReturnType	types.html#getReturnType,PSym	proc getReturnType(s: PSym): PType		1383
nim	getAlign	types.html#getAlign,ConfigRef,PType	proc getAlign(conf: ConfigRef; typ: PType): BiggestInt		1388
nim	getSize	types.html#getSize,ConfigRef,PType	proc getSize(conf: ConfigRef; typ: PType): BiggestInt		1392
nim	containsGenericType	types.html#containsGenericType,PType	proc containsGenericType(t: PType): bool		1409
nim	baseOfDistinct	types.html#baseOfDistinct,PType,ModuleGraph,IdGenerator	proc baseOfDistinct(t: PType; g: ModuleGraph; idgen: IdGenerator): PType		1412
nim	safeInheritanceDiff	types.html#safeInheritanceDiff,PType,PType	proc safeInheritanceDiff(a, b: PType): int		1426
nim	isDefectException	types.html#isDefectException,PType	proc isDefectException(t: PType): bool		1443
nim	efCompat	types.html#efCompat	EffectsCompat.efCompat		1465
nim	efRaisesDiffer	types.html#efRaisesDiffer	EffectsCompat.efRaisesDiffer		1465
nim	efRaisesUnknown	types.html#efRaisesUnknown	EffectsCompat.efRaisesUnknown		1465
nim	efTagsDiffer	types.html#efTagsDiffer	EffectsCompat.efTagsDiffer		1465
nim	efTagsUnknown	types.html#efTagsUnknown	EffectsCompat.efTagsUnknown		1465
nim	efEffectsDelayed	types.html#efEffectsDelayed	EffectsCompat.efEffectsDelayed		1465
nim	efTagsIllegal	types.html#efTagsIllegal	EffectsCompat.efTagsIllegal		1465
nim	EffectsCompat	types.html#EffectsCompat	enum EffectsCompat		1465
nim	compatibleEffects	types.html#compatibleEffects,PType,PType	proc compatibleEffects(formal, actual: PType): EffectsCompat		1474
nim	isCompileTimeOnly	types.html#isCompileTimeOnly,PType	proc isCompileTimeOnly(t: PType): bool		1522
nim	containsCompileTimeOnly	types.html#containsCompileTimeOnly,PType	proc containsCompileTimeOnly(t: PType): bool		1525
nim	safeSkipTypes	types.html#safeSkipTypes,PType,TTypeKinds	proc safeSkipTypes(t: PType; kinds: TTypeKinds): PType		1532
nim	NoneLike	types.html#NoneLike	OrdinalType.NoneLike		1540
nim	IntLike	types.html#IntLike	OrdinalType.IntLike		1540
nim	FloatLike	types.html#FloatLike	OrdinalType.FloatLike		1540
nim	OrdinalType	types.html#OrdinalType	enum OrdinalType		1540
nim	classify	types.html#classify,PType	proc classify(t: PType): OrdinalType		1543
nim	skipConv	types.html#skipConv,PNode	proc skipConv(n: PNode): PNode		1554
nim	skipHidden	types.html#skipHidden,PNode	proc skipHidden(n: PNode): PNode		1567
nim	skipConvTakeType	types.html#skipConvTakeType,PNode	proc skipConvTakeType(n: PNode): PNode		1579
nim	isEmptyContainer	types.html#isEmptyContainer,PType	proc isEmptyContainer(t: PType): bool		1583
nim	takeType	types.html#takeType,PType,PType,ModuleGraph,IdGenerator	proc takeType(formal, arg: PType; g: ModuleGraph; idgen: IdGenerator): PType		1591
nim	skipHiddenSubConv	types.html#skipHiddenSubConv,PNode,ModuleGraph,IdGenerator	proc skipHiddenSubConv(n: PNode; g: ModuleGraph; idgen: IdGenerator): PNode		1608
nim	getProcConvMismatch	types.html#getProcConvMismatch,ConfigRef,PType,PType	proc getProcConvMismatch(c: ConfigRef; f, a: PType; rel = isNone): (\n    set[ProcConvMismatch], TTypeRelation)		1625
nim	addPragmaAndCallConvMismatch	types.html#addPragmaAndCallConvMismatch,string,PType,PType,ConfigRef	proc addPragmaAndCallConvMismatch(message: var string; formal, actual: PType;\n                             conf: ConfigRef)		1656
nim	typeMismatch	types.html#typeMismatch,ConfigRef,TLineInfo,PType,PType,PNode	proc typeMismatch(conf: ConfigRef; info: TLineInfo; formal, actual: PType; n: PNode)		1695
nim	isTupleRecursive	types.html#isTupleRecursive,PType	proc isTupleRecursive(t: PType): bool		1748
nim	isException	types.html#isException,PType	proc isException(t: PType): bool		1752
nim	isDefectOrCatchableError	types.html#isDefectOrCatchableError,PType	proc isDefectOrCatchableError(t: PType): bool		1774
nim	isSinkTypeForParam	types.html#isSinkTypeForParam,PType	proc isSinkTypeForParam(t: PType): bool		1786
nim	lookupFieldAgain	types.html#lookupFieldAgain,PType,PSym	proc lookupFieldAgain(ty: PType; field: PSym): PSym		1797
nim	isCharArrayPtr	types.html#isCharArrayPtr,PType,bool	proc isCharArrayPtr(t: PType; allowPointerToChar: bool): bool		1808
nim	lacksMTypeField	types.html#lacksMTypeField,PType	proc lacksMTypeField(typ: PType): bool		1825
