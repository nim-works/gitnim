Whitespace	strutils.html#Whitespace	strutils: Whitespace	
Letters	strutils.html#Letters	strutils: Letters	
Digits	strutils.html#Digits	strutils: Digits	
HexDigits	strutils.html#HexDigits	strutils: HexDigits	
IdentChars	strutils.html#IdentChars	strutils: IdentChars	
IdentStartChars	strutils.html#IdentStartChars	strutils: IdentStartChars	
Newlines	strutils.html#Newlines	strutils: Newlines	
AllChars	strutils.html#AllChars	strutils: AllChars	
isAlphaAscii	strutils.html#isAlphaAscii,char	strutils: isAlphaAscii(c: char): bool	
isAlphaNumeric	strutils.html#isAlphaNumeric,char	strutils: isAlphaNumeric(c: char): bool	
isDigit	strutils.html#isDigit,char	strutils: isDigit(c: char): bool	
isSpaceAscii	strutils.html#isSpaceAscii,char	strutils: isSpaceAscii(c: char): bool	
isLowerAscii	strutils.html#isLowerAscii,char	strutils: isLowerAscii(c: char): bool	
isUpperAscii	strutils.html#isUpperAscii,char	strutils: isUpperAscii(c: char): bool	
toLowerAscii	strutils.html#toLowerAscii,char	strutils: toLowerAscii(c: char): char	
toLowerAscii	strutils.html#toLowerAscii,string	strutils: toLowerAscii(s: string): string	
toUpperAscii	strutils.html#toUpperAscii,char	strutils: toUpperAscii(c: char): char	
toUpperAscii	strutils.html#toUpperAscii,string	strutils: toUpperAscii(s: string): string	
capitalizeAscii	strutils.html#capitalizeAscii,string	strutils: capitalizeAscii(s: string): string	
nimIdentNormalize	strutils.html#nimIdentNormalize,string	strutils: nimIdentNormalize(s: string): string	
normalize	strutils.html#normalize,string	strutils: normalize(s: string): string	
cmpIgnoreCase	strutils.html#cmpIgnoreCase,string,string	strutils: cmpIgnoreCase(a, b: string): int	
cmpIgnoreStyle	strutils.html#cmpIgnoreStyle,string,string	strutils: cmpIgnoreStyle(a, b: string): int	
split	strutils.html#split.i,string,char,int	strutils: split(s: string; sep: char; maxsplit: int = -1): string	
split	strutils.html#split.i,string,set[char],int	strutils: split(s: string; seps: set[char] = Whitespace; maxsplit: int = -1): string	
split	strutils.html#split.i,string,string,int	strutils: split(s: string; sep: string; maxsplit: int = -1): string	
rsplit	strutils.html#rsplit.i,string,char,int	strutils: rsplit(s: string; sep: char; maxsplit: int = -1): string	
rsplit	strutils.html#rsplit.i,string,set[char],int	strutils: rsplit(s: string; seps: set[char] = Whitespace; maxsplit: int = -1): string	
rsplit	strutils.html#rsplit.i,string,string,int,bool	strutils: rsplit(s: string; sep: string; maxsplit: int = -1; keepSeparators: bool = false): string	
splitLines	strutils.html#splitLines.i,string	strutils: splitLines(s: string; keepEol = false): string	
splitWhitespace	strutils.html#splitWhitespace.i,string,int	strutils: splitWhitespace(s: string; maxsplit: int = -1): string	
split	strutils.html#split,string,char,int	strutils: split(s: string; sep: char; maxsplit: int = -1): seq[string]	
split	strutils.html#split,string,set[char],int	strutils: split(s: string; seps: set[char] = Whitespace; maxsplit: int = -1): seq[string]	
split	strutils.html#split,string,string,int	strutils: split(s: string; sep: string; maxsplit: int = -1): seq[string]	
rsplit	strutils.html#rsplit,string,char,int	strutils: rsplit(s: string; sep: char; maxsplit: int = -1): seq[string]	
rsplit	strutils.html#rsplit,string,set[char],int	strutils: rsplit(s: string; seps: set[char] = Whitespace; maxsplit: int = -1): seq[string]	
rsplit	strutils.html#rsplit,string,string,int	strutils: rsplit(s: string; sep: string; maxsplit: int = -1): seq[string]	
splitLines	strutils.html#splitLines,string	strutils: splitLines(s: string; keepEol = false): seq[string]	
splitWhitespace	strutils.html#splitWhitespace,string,int	strutils: splitWhitespace(s: string; maxsplit: int = -1): seq[string]	
toBin	strutils.html#toBin,BiggestInt,Positive	strutils: toBin(x: BiggestInt; len: Positive): string	
toOct	strutils.html#toOct,BiggestInt,Positive	strutils: toOct(x: BiggestInt; len: Positive): string	
toHex	strutils.html#toHex,T,Positive	strutils: toHex[T: SomeInteger](x: T; len: Positive): string	
toHex	strutils.html#toHex,T	strutils: toHex[T: SomeInteger](x: T): string	
toHex	strutils.html#toHex,string	strutils: toHex(s: string): string	
toOctal	strutils.html#toOctal,char	strutils: toOctal(c: char): string	
fromBin	strutils.html#fromBin,string	strutils: fromBin[T: SomeInteger](s: string): T	
fromOct	strutils.html#fromOct,string	strutils: fromOct[T: SomeInteger](s: string): T	
fromHex	strutils.html#fromHex,string	strutils: fromHex[T: SomeInteger](s: string): T	
intToStr	strutils.html#intToStr,int,Positive	strutils: intToStr(x: int; minchars: Positive = 1): string	
parseInt	strutils.html#parseInt,string	strutils: parseInt(s: string): int	
parseBiggestInt	strutils.html#parseBiggestInt,string	strutils: parseBiggestInt(s: string): BiggestInt	
parseUInt	strutils.html#parseUInt,string	strutils: parseUInt(s: string): uint	
parseBiggestUInt	strutils.html#parseBiggestUInt,string	strutils: parseBiggestUInt(s: string): BiggestUInt	
parseFloat	strutils.html#parseFloat,string	strutils: parseFloat(s: string): float	
parseBinInt	strutils.html#parseBinInt,string	strutils: parseBinInt(s: string): int	
parseOctInt	strutils.html#parseOctInt,string	strutils: parseOctInt(s: string): int	
parseHexInt	strutils.html#parseHexInt,string	strutils: parseHexInt(s: string): int	
parseHexStr	strutils.html#parseHexStr,string	strutils: parseHexStr(s: string): string	
parseBool	strutils.html#parseBool,string	strutils: parseBool(s: string): bool	
parseEnum	strutils.html#parseEnum,string	strutils: parseEnum[T: enum](s: string): T	
parseEnum	strutils.html#parseEnum,string,T	strutils: parseEnum[T: enum](s: string; default: T): T	
repeat	strutils.html#repeat,char,Natural	strutils: repeat(c: char; count: Natural): string	
repeat	strutils.html#repeat,string,Natural	strutils: repeat(s: string; n: Natural): string	
spaces	strutils.html#spaces,Natural	strutils: spaces(n: Natural): string	
align	strutils.html#align,string,Natural,char	strutils: align(s: string; count: Natural; padding = &apos; &apos;): string	
alignLeft	strutils.html#alignLeft,string,Natural,char	strutils: alignLeft(s: string; count: Natural; padding = &apos; &apos;): string	
center	strutils.html#center,string,int,char	strutils: center(s: string; width: int; fillChar: char = &apos; &apos;): string	
indent	strutils.html#indent,string,Natural,string	strutils: indent(s: string; count: Natural; padding: string = &quot; &quot;): string	
unindent	strutils.html#unindent,string,Natural,string	strutils: unindent(s: string; count: Natural = int.high; padding: string = &quot; &quot;): string	
indentation	strutils.html#indentation,string	strutils: indentation(s: string): Natural	
dedent	strutils.html#dedent,string,Natural	strutils: dedent(s: string; count: Natural = indentation(s)): string	
delete	strutils.html#delete,string,int,int	strutils: delete(s: var string; first, last: int)	
startsWith	strutils.html#startsWith,string,char	strutils: startsWith(s: string; prefix: char): bool	
startsWith	strutils.html#startsWith,string,string	strutils: startsWith(s, prefix: string): bool	
endsWith	strutils.html#endsWith,string,char	strutils: endsWith(s: string; suffix: char): bool	
endsWith	strutils.html#endsWith,string,string	strutils: endsWith(s, suffix: string): bool	
continuesWith	strutils.html#continuesWith,string,string,Natural	strutils: continuesWith(s, substr: string; start: Natural): bool	
removePrefix	strutils.html#removePrefix,string,set[char]	strutils: removePrefix(s: var string; chars: set[char] = Newlines)	
removePrefix	strutils.html#removePrefix,string,char	strutils: removePrefix(s: var string; c: char)	
removePrefix	strutils.html#removePrefix,string,string	strutils: removePrefix(s: var string; prefix: string)	
removeSuffix	strutils.html#removeSuffix,string,set[char]	strutils: removeSuffix(s: var string; chars: set[char] = Newlines)	
removeSuffix	strutils.html#removeSuffix,string,char	strutils: removeSuffix(s: var string; c: char)	
removeSuffix	strutils.html#removeSuffix,string,string	strutils: removeSuffix(s: var string; suffix: string)	
addSep	strutils.html#addSep,string,string,Natural	strutils: addSep(dest: var string; sep = &quot;, &quot;; startLen: Natural = 0)	
allCharsInSet	strutils.html#allCharsInSet,string,set[char]	strutils: allCharsInSet(s: string; theSet: set[char]): bool	
abbrev	strutils.html#abbrev,string,openArray[string]	strutils: abbrev(s: string; possibilities: openArray[string]): int	
join	strutils.html#join,openArray[string],string	strutils: join(a: openArray[string]; sep: string = &quot;&quot;): string	
join	strutils.html#join,openArray[T],string	strutils: join[T: not string](a: openArray[T]; sep: string = &quot;&quot;): string	
SkipTable	strutils.html#SkipTable	strutils: SkipTable	
initSkipTable	strutils.html#initSkipTable,SkipTable,string	strutils: initSkipTable(a: var SkipTable; sub: string)	
find	strutils.html#find,SkipTable,string,string,Natural,int	strutils: find(a: SkipTable; s, sub: string; start: Natural = 0; last = 0): int	
find	strutils.html#find,string,char,Natural,int	strutils: find(s: string; sub: char; start: Natural = 0; last = 0): int	
find	strutils.html#find,string,set[char],Natural,int	strutils: find(s: string; chars: set[char]; start: Natural = 0; last = 0): int	
find	strutils.html#find,string,string,Natural,int	strutils: find(s, sub: string; start: Natural = 0; last = 0): int	
rfind	strutils.html#rfind,string,char,Natural,int	strutils: rfind(s: string; sub: char; start: Natural = 0; last = -1): int	
rfind	strutils.html#rfind,string,set[char],Natural,int	strutils: rfind(s: string; chars: set[char]; start: Natural = 0; last = -1): int	
rfind	strutils.html#rfind,string,string,Natural,int	strutils: rfind(s, sub: string; start: Natural = 0; last = -1): int	
count	strutils.html#count,string,char	strutils: count(s: string; sub: char): int	
count	strutils.html#count,string,set[char]	strutils: count(s: string; subs: set[char]): int	
count	strutils.html#count,string,string,bool	strutils: count(s: string; sub: string; overlapping: bool = false): int	
countLines	strutils.html#countLines,string	strutils: countLines(s: string): int	
contains	strutils.html#contains,string,string	strutils: contains(s, sub: string): bool	
contains	strutils.html#contains,string,set[char]	strutils: contains(s: string; chars: set[char]): bool	
replace	strutils.html#replace,string,string,string	strutils: replace(s, sub: string; by = &quot;&quot;): string	
replace	strutils.html#replace,string,char,char	strutils: replace(s: string; sub, by: char): string	
replaceWord	strutils.html#replaceWord,string,string,string	strutils: replaceWord(s, sub: string; by = &quot;&quot;): string	
multiReplace	strutils.html#multiReplace,string,varargs[]	strutils: multiReplace(s: string; replacements: varargs[(string, string)]): string	
insertSep	strutils.html#insertSep,string,char,int	strutils: insertSep(s: string; sep = &apos;_&apos;; digits = 3): string	
escape	strutils.html#escape,string,string,string	strutils: escape(s: string; prefix = &quot;\&quot;&quot;; suffix = &quot;\&quot;&quot;): string	
unescape	strutils.html#unescape,string,string,string	strutils: unescape(s: string; prefix = &quot;\&quot;&quot;; suffix = &quot;\&quot;&quot;): string	
validIdentifier	strutils.html#validIdentifier,string	strutils: validIdentifier(s: string): bool	
ffDefault	strutils.html#ffDefault	FloatFormatMode.ffDefault	
ffDecimal	strutils.html#ffDecimal	FloatFormatMode.ffDecimal	
ffScientific	strutils.html#ffScientific	FloatFormatMode.ffScientific	
FloatFormatMode	strutils.html#FloatFormatMode	strutils: FloatFormatMode	
formatBiggestFloat	strutils.html#formatBiggestFloat,BiggestFloat,FloatFormatMode,range[],char	strutils: formatBiggestFloat(f: BiggestFloat; format: FloatFormatMode = ffDefault;\n                   precision: range[-1 .. 32] = 16; decimalSep = &apos;.&apos;): string	
formatFloat	strutils.html#formatFloat,float,FloatFormatMode,range[],char	strutils: formatFloat(f: float; format: FloatFormatMode = ffDefault;\n            precision: range[-1 .. 32] = 16; decimalSep = &apos;.&apos;): string	
trimZeros	strutils.html#trimZeros,string,char	strutils: trimZeros(x: var string; decimalSep = &apos;.&apos;)	
bpIEC	strutils.html#bpIEC	BinaryPrefixMode.bpIEC	
bpColloquial	strutils.html#bpColloquial	BinaryPrefixMode.bpColloquial	
BinaryPrefixMode	strutils.html#BinaryPrefixMode	strutils: BinaryPrefixMode	
formatSize	strutils.html#formatSize,int64,char	strutils: formatSize(bytes: int64; decimalSep = &apos;.&apos;; prefix = bpIEC; includeSpace = false): string	
formatEng	strutils.html#formatEng,BiggestFloat,range[],bool,bool,string,char	strutils: formatEng(f: BiggestFloat; precision: range[0 .. 32] = 10; trim: bool = true;\n          siPrefix: bool = false; unit: string = &quot;&quot;; decimalSep = &apos;.&apos;;\n          useUnitSpace = false): string	
addf	strutils.html#addf,string,string,varargs[string,]	strutils: addf(s: var string; formatstr: string; a: varargs[string, `$`])	
substitution	strutils.html#substitution_1	Module strutils	
string interpolation	strutils.html#string-interpolation_1	Module strutils	
`%`	strutils.html#%,string,openArray[string]	strutils: `%`(formatstr: string; a: openArray[string]): string	
`%`	strutils.html#%,string,string	strutils: `%`(formatstr, a: string): string	
format	strutils.html#format,string,varargs[string,]	strutils: format(formatstr: string; a: varargs[string, `$`]): string	
strip	strutils.html#strip,string,set[char]	strutils: strip(s: string; leading = true; trailing = true; chars: set[char] = Whitespace): string	
chomp	strutils.html#chomp_1	Module strutils	
stripLineEnd	strutils.html#stripLineEnd,string	strutils: stripLineEnd(s: var string)	
tokenize	strutils.html#tokenize.i,string,set[char]	strutils: tokenize(s: string; seps: set[char] = Whitespace): tuple[token: string,\n    isSep: bool]	
isEmptyOrWhitespace	strutils.html#isEmptyOrWhitespace,string	strutils: isEmptyOrWhitespace(s: string): bool	
