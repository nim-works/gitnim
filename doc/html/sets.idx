nimTitle	sets	sets.html	module std/sets		0
nim	HashSet	sets.html#HashSet	object HashSet		64
nim	OrderedSet	sets.html#OrderedSet	object OrderedSet		76
nim	SomeSet	sets.html#SomeSet	type SomeSet		83
nim	defaultInitialSize	sets.html#defaultInitialSize	const defaultInitialSize		87
nim	init	sets.html#init,HashSet[A]	proc init[A](s: var HashSet[A]; initialSize = defaultInitialSize)		96
nim	initHashSet	sets.html#initHashSet	proc initHashSet[A](initialSize = defaultInitialSize): HashSet[A]		115
nim	`[]`	sets.html#[],HashSet[A],A	proc `[]`[A](s: var HashSet[A]; key: A): var A		134
nim	contains	sets.html#contains,HashSet[A],A	proc contains[A](s: HashSet[A]; key: A): bool		149
nim	len	sets.html#len,HashSet[A]	proc len[A](s: HashSet[A]): int		170
nim	card	sets.html#card,HashSet[A]	proc card[A](s: HashSet[A]): int		184
nim	incl	sets.html#incl,HashSet[A],A	proc incl[A](s: var HashSet[A]; key: A)		191
nim	incl	sets.html#incl,HashSet[A],HashSet[A]	proc incl[A](s: var HashSet[A]; other: HashSet[A])		208
nim	toHashSet	sets.html#toHashSet,openArray[A]	proc toHashSet[A](keys: openArray[A]): HashSet[A]		226
nim	items	sets.html#items.i,HashSet[A]	iterator items[A](s: HashSet[A]): A		246
nim	containsOrIncl	sets.html#containsOrIncl,HashSet[A],A	proc containsOrIncl[A](s: var HashSet[A]; key: A): bool		271
nim	excl	sets.html#excl,HashSet[A],A	proc excl[A](s: var HashSet[A]; key: A)		291
nim	excl	sets.html#excl,HashSet[A],HashSet[A]	proc excl[A](s: var HashSet[A]; other: HashSet[A])		308
nim	missingOrExcl	sets.html#missingOrExcl,HashSet[A],A	proc missingOrExcl[A](s: var HashSet[A]; key: A): bool		327
nim	pop	sets.html#pop,HashSet[A]	proc pop[A](s: var HashSet[A]): A		347
nim	clear	sets.html#clear,HashSet[A]	proc clear[A](s: var HashSet[A])		366
nim	union	sets.html#union,HashSet[A],HashSet[A]	proc union[A](s1, s2: HashSet[A]): HashSet[A]		385
nim	intersection	sets.html#intersection,HashSet[A],HashSet[A]	proc intersection[A](s1, s2: HashSet[A]): HashSet[A]		407
nim	difference	sets.html#difference,HashSet[A],HashSet[A]	proc difference[A](s1, s2: HashSet[A]): HashSet[A]		438
nim	symmetricDifference	sets.html#symmetricDifference,HashSet[A],HashSet[A]	proc symmetricDifference[A](s1, s2: HashSet[A]): HashSet[A]		462
nim	`+`	sets.html#+,HashSet[A],HashSet[A]	proc `+`[A](s1, s2: HashSet[A]): HashSet[A]		486
nim	`*`	sets.html#*,HashSet[A],HashSet[A]	proc `*`[A](s1, s2: HashSet[A]): HashSet[A]		490
nim	`-`	sets.html#-,HashSet[A],HashSet[A]	proc `-`[A](s1, s2: HashSet[A]): HashSet[A]		494
nim	`-+-`	sets.html#-+-,HashSet[A],HashSet[A]	proc `-+-`[A](s1, s2: HashSet[A]): HashSet[A]		498
nim	disjoint	sets.html#disjoint,HashSet[A],HashSet[A]	proc disjoint[A](s1, s2: HashSet[A]): bool		503
nim	`<`	sets.html#<,HashSet[A],HashSet[A]	proc `<`[A](s, t: HashSet[A]): bool		516
nim	`<=`	sets.html#<=,HashSet[A],HashSet[A]	proc `<=`[A](s, t: HashSet[A]): bool		531
nim	`==`	sets.html#==,HashSet[A],HashSet[A]	proc `==`[A](s, t: HashSet[A]): bool		552
nim	map	sets.html#map,HashSet[A],proc(A)	proc map[A, B](data: HashSet[A]; op: proc (x: A): B {.closure.}): HashSet[B]		562
nim	hash	sets.html#hash,HashSet[A]	proc hash[A](s: HashSet[A]): Hash		576
nim	`$`	sets.html#$,HashSet[A]	proc `$`[A](s: HashSet[A]): string		582
nim	initSet	sets.html#initSet	proc initSet[A](initialSize = defaultInitialSize): HashSet[A]		598
nim	toSet	sets.html#toSet,openArray[A]	proc toSet[A](keys: openArray[A]): HashSet[A]		601
nim	isValid	sets.html#isValid,HashSet[A]	proc isValid[A](s: HashSet[A]): bool		604
nim	init	sets.html#init,OrderedSet[A]	proc init[A](s: var OrderedSet[A]; initialSize = defaultInitialSize)		633
nim	initOrderedSet	sets.html#initOrderedSet	proc initOrderedSet[A](initialSize = defaultInitialSize): OrderedSet[A]		652
nim	toOrderedSet	sets.html#toOrderedSet,openArray[A]	proc toOrderedSet[A](keys: openArray[A]): OrderedSet[A]		671
nim	contains	sets.html#contains,OrderedSet[A],A	proc contains[A](s: OrderedSet[A]; key: A): bool		691
nim	incl	sets.html#incl,OrderedSet[A],A	proc incl[A](s: var OrderedSet[A]; key: A)		712
nim	incl	sets.html#incl,HashSet[A],OrderedSet[A]	proc incl[A](s: var HashSet[A]; other: OrderedSet[A])		729
nim	containsOrIncl	sets.html#containsOrIncl,OrderedSet[A],A	proc containsOrIncl[A](s: var OrderedSet[A]; key: A): bool		745
nim	excl	sets.html#excl,OrderedSet[A],A	proc excl[A](s: var OrderedSet[A]; key: A)		764
nim	missingOrExcl	sets.html#missingOrExcl,OrderedSet[A],A	proc missingOrExcl[A](s: var OrderedSet[A]; key: A): bool		780
nim	clear	sets.html#clear,OrderedSet[A]	proc clear[A](s: var OrderedSet[A])		800
nim	len	sets.html#len,OrderedSet[A]	proc len[A](s: OrderedSet[A]): int		818
nim	card	sets.html#card,OrderedSet[A]	proc card[A](s: OrderedSet[A]): int		832
nim	`==`	sets.html#==,OrderedSet[A],OrderedSet[A]	proc `==`[A](s, t: OrderedSet[A]): bool		839
nim	hash	sets.html#hash,OrderedSet[A]	proc hash[A](s: OrderedSet[A]): Hash		863
nim	`$`	sets.html#$,OrderedSet[A]	proc `$`[A](s: OrderedSet[A]): string		869
nim	items	sets.html#items.i,OrderedSet[A]	iterator items[A](s: OrderedSet[A]): A		887
nim	pairs	sets.html#pairs.i,OrderedSet[A]	iterator pairs[A](s: OrderedSet[A]): tuple[a: int, b: A]		910
idx	hash set	sets.html#hash-set_1	Module sets		0
nimgrp	contains	sets.html#contains-procs-all	proc		149
nimgrp	$	sets.html#$-procs-all	proc		582
nimgrp	containsorincl	sets.html#containsOrIncl-procs-all	proc		271
nimgrp	excl	sets.html#excl-procs-all	proc		291
nimgrp	card	sets.html#card-procs-all	proc		184
nimgrp	len	sets.html#len-procs-all	proc		170
nimgrp	missingorexcl	sets.html#missingOrExcl-procs-all	proc		327
nimgrp	incl	sets.html#incl-procs-all	proc		191
nimgrp	init	sets.html#init-procs-all	proc		96
nimgrp	clear	sets.html#clear-procs-all	proc		366
nimgrp	==	sets.html#==-procs-all	proc		552
nimgrp	hash	sets.html#hash-procs-all	proc		576
nimgrp	items	sets.html#items-iterators-all	iterator		246
