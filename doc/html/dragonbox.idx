dtoaMinBufferLength	dragonbox.html#dtoaMinBufferLength	dragonbox: dtoaMinBufferLength	
dragonbox_Assert	dragonbox.html#dragonbox_Assert.t,untyped	dragonbox: dragonbox_Assert(x: untyped): untyped	
ValueType	dragonbox.html#ValueType	dragonbox: ValueType	
BitsType	dragonbox.html#BitsType	dragonbox: BitsType	
Double	dragonbox.html#Double	dragonbox: Double	
significandSize	dragonbox.html#significandSize	dragonbox: significandSize	
exponentBias	dragonbox.html#exponentBias	dragonbox: exponentBias	
maxIeeeExponent	dragonbox.html#maxIeeeExponent	dragonbox: maxIeeeExponent	
hiddenBit	dragonbox.html#hiddenBit	dragonbox: hiddenBit	
significandMask	dragonbox.html#significandMask	dragonbox: significandMask	
exponentMask	dragonbox.html#exponentMask	dragonbox: exponentMask	
signMask	dragonbox.html#signMask	dragonbox: signMask	
constructDouble	dragonbox.html#constructDouble,BitsType	dragonbox: constructDouble(bits: BitsType): Double	
constructDouble	dragonbox.html#constructDouble,ValueType	dragonbox: constructDouble(value: ValueType): Double	
physicalSignificand	dragonbox.html#physicalSignificand,Double	dragonbox: physicalSignificand(this: Double): BitsType	
physicalExponent	dragonbox.html#physicalExponent,Double	dragonbox: physicalExponent(this: Double): BitsType	
isFinite	dragonbox.html#isFinite,Double	dragonbox: isFinite(this: Double): bool	
isInf	dragonbox.html#isInf,Double	dragonbox: isInf(this: Double): bool	
isNaN	dragonbox.html#isNaN,Double	dragonbox: isNaN(this: Double): bool	
isZero	dragonbox.html#isZero,Double	dragonbox: isZero(this: Double): bool	
signBit	dragonbox.html#signBit,Double	dragonbox: signBit(this: Double): int	
floorDivPow2	dragonbox.html#floorDivPow2,int32,int32	dragonbox: floorDivPow2(x: int32; n: int32): int32	
floorLog2Pow10	dragonbox.html#floorLog2Pow10,int32	dragonbox: floorLog2Pow10(e: int32): int32	
floorLog10Pow2	dragonbox.html#floorLog10Pow2,int32	dragonbox: floorLog10Pow2(e: int32): int32	
floorLog10ThreeQuartersPow2	dragonbox.html#floorLog10ThreeQuartersPow2,int32	dragonbox: floorLog10ThreeQuartersPow2(e: int32): int32	
uint64x2	dragonbox.html#uint64x2	dragonbox: uint64x2	
computePow10	dragonbox.html#computePow10,int32	dragonbox: computePow10(k: int32): uint64x2	
multipleOfPow2	dragonbox.html#multipleOfPow2,uint64,int32	dragonbox: multipleOfPow2(value: uint64; e2: int32): bool	
multipleOfPow5	dragonbox.html#multipleOfPow5,uint64,int32	dragonbox: multipleOfPow5(value: uint64; e5: int32): bool	
FloatingDecimal64	dragonbox.html#FloatingDecimal64	dragonbox: FloatingDecimal64	
toDecimal64AsymmetricInterval	dragonbox.html#toDecimal64AsymmetricInterval,int32	dragonbox: toDecimal64AsymmetricInterval(e2: int32): FloatingDecimal64	
computeDelta	dragonbox.html#computeDelta,uint64x2,int32	dragonbox: computeDelta(pow10: uint64x2; betaMinus1: int32): uint32	
lo32	dragonbox.html#lo32,uint64	dragonbox: lo32(x: uint64): uint32	
hi32	dragonbox.html#hi32,uint64	dragonbox: hi32(x: uint64): uint32	
mul128	dragonbox.html#mul128,uint64,uint64	dragonbox: mul128(a: uint64; b: uint64): uint64x2	
mulShift	dragonbox.html#mulShift,uint64,uint64x2	dragonbox: mulShift(x: uint64; y: uint64x2): uint64	
mulParity	dragonbox.html#mulParity,uint64,uint64x2,int32	dragonbox: mulParity(twoF: uint64; pow10: uint64x2; betaMinus1: int32): bool	
isIntegralEndpoint	dragonbox.html#isIntegralEndpoint,uint64,int32,int32	dragonbox: isIntegralEndpoint(twoF: uint64; e2: int32; minusK: int32): bool	
isIntegralMidpoint	dragonbox.html#isIntegralMidpoint,uint64,int32,int32	dragonbox: isIntegralMidpoint(twoF: uint64; e2: int32; minusK: int32): bool	
toDecimal64	dragonbox.html#toDecimal64,uint64,uint64	dragonbox: toDecimal64(ieeeSignificand: uint64; ieeeExponent: uint64): FloatingDecimal64	
utoa8DigitsSkipTrailingZeros	dragonbox.html#utoa8DigitsSkipTrailingZeros,openArray[char],int,uint32	dragonbox: utoa8DigitsSkipTrailingZeros(buf: var openArray[char]; pos: int; digits: uint32): int32	
printDecimalDigitsBackwards	dragonbox.html#printDecimalDigitsBackwards,openArray[char],int,uint64	dragonbox: printDecimalDigitsBackwards(buf: var openArray[char]; pos: int; output64: uint64): int32	
decimalLength	dragonbox.html#decimalLength,uint64	dragonbox: decimalLength(v: uint64): int32	
formatDigits	dragonbox.html#formatDigits,openArray[char],int,uint64,int32	dragonbox: formatDigits(buffer: var openArray[char]; pos: int; digits: uint64;\n             decimalExponent: int32; forceTrailingDotZero = false): int	
toChars	dragonbox.html#toChars,openArray[char],float	dragonbox: toChars(buffer: var openArray[char]; v: float; forceTrailingDotZero = false): int	
