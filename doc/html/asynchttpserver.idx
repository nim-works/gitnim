Request	asynchttpserver.html#Request	asynchttpserver: Request	
AsyncHttpServer	asynchttpserver.html#AsyncHttpServer	asynchttpserver: AsyncHttpServer	
getPort	asynchttpserver.html#getPort,AsyncHttpServer	asynchttpserver: getPort(self: AsyncHttpServer): Port	
newAsyncHttpServer	asynchttpserver.html#newAsyncHttpServer,int	asynchttpserver: newAsyncHttpServer(reuseAddr = true; reusePort = false; maxBody = 8388608): AsyncHttpServer	
sendHeaders	asynchttpserver.html#sendHeaders,Request,HttpHeaders	asynchttpserver: sendHeaders(req: Request; headers: HttpHeaders): Future[void]	
respond	asynchttpserver.html#respond,Request,HttpCode,string,HttpHeaders	asynchttpserver: respond(req: Request; code: HttpCode; content: string;\n        headers: HttpHeaders = nil): Future[void]	
nimMaxDescriptorsFallback	asynchttpserver.html#nimMaxDescriptorsFallback	asynchttpserver: nimMaxDescriptorsFallback	
listen	asynchttpserver.html#listen,AsyncHttpServer,Port,string	asynchttpserver: listen(server: AsyncHttpServer; port: Port; address = &quot;&quot;)	
shouldAcceptRequest	asynchttpserver.html#shouldAcceptRequest,AsyncHttpServer,int	asynchttpserver: shouldAcceptRequest(server: AsyncHttpServer; assumedDescriptorsPerRequest = 5): bool	
acceptRequest	asynchttpserver.html#acceptRequest,AsyncHttpServer,proc(Request)	asynchttpserver: acceptRequest(server: AsyncHttpServer; callback: proc (request: Request): Future[\n    void] {.closure, gcsafe.}): owned(Future[void])	
serve	asynchttpserver.html#serve,AsyncHttpServer,Port,proc(Request),string,int	asynchttpserver: serve(server: AsyncHttpServer; port: Port;\n      callback: proc (request: Request): Future[void] {.closure, gcsafe.};\n      address = &quot;&quot;; assumedDescriptorsPerRequest = -1): owned(Future[void])	
close	asynchttpserver.html#close,AsyncHttpServer	asynchttpserver: close(server: AsyncHttpServer)	
